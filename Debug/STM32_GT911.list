
STM32_GT911.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005128  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052e0  080052e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e8  080052e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  080052fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080052fc  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a2b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179e  00000000  00000000  00028a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0002a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  0002a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015522  00000000  00000000  0002b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a013  00000000  00000000  000405ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c58  00000000  00000000  0004a5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf225  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e60  00000000  00000000  000cf278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080052a8 	.word	0x080052a8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080052a8 	.word	0x080052a8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fb0e 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f80a 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8c6 	bl	8000678 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ec:	f000 f89c 	bl	8000628 <MX_DMA_Init>
  MX_I2C1_Init();
 80004f0:	f000 f86c 	bl	80005cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  GT911_init();
 80004f4:	f004 fc38 	bl	8004d68 <GT911_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <main+0x1c>
	...

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f004 fec4 	bl	8005298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <SystemClock_Config+0xc8>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a26      	ldr	r2, [pc, #152]	; (80005c4 <SystemClock_Config+0xc8>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <SystemClock_Config+0xc8>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <SystemClock_Config+0xcc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a20      	ldr	r2, [pc, #128]	; (80005c8 <SystemClock_Config+0xcc>)
 8000546:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <SystemClock_Config+0xcc>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800056c:	230c      	movs	r3, #12
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000570:	2360      	movs	r3, #96	; 0x60
 8000572:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000578:	2304      	movs	r3, #4
 800057a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f003 ff67 	bl	8004454 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800058c:	f000 f8e8 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2103      	movs	r1, #3
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 f9c9 	bl	8004944 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005b8:	f000 f8d2 	bl	8000760 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3750      	adds	r7, #80	; 0x50
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_I2C1_Init+0x50>)
 80005d2:	4a13      	ldr	r2, [pc, #76]	; (8000620 <MX_I2C1_Init+0x54>)
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_I2C1_Init+0x50>)
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <MX_I2C1_Init+0x58>)
 80005da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_I2C1_Init+0x50>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_I2C1_Init+0x50>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_I2C1_Init+0x50>)
 80005ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <MX_I2C1_Init+0x50>)
 800060a:	f001 fb1b 	bl	8001c44 <HAL_I2C_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000614:	f000 f8a4 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000028 	.word	0x20000028
 8000620:	40005400 	.word	0x40005400
 8000624:	000186a0 	.word	0x000186a0

08000628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_DMA_Init+0x4c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <MX_DMA_Init+0x4c>)
 8000638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <MX_DMA_Init+0x4c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	200b      	movs	r0, #11
 8000650:	f000 fbeb 	bl	8000e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000654:	200b      	movs	r0, #11
 8000656:	f000 fc04 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	2011      	movs	r0, #17
 8000660:	f000 fbe3 	bl	8000e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000664:	2011      	movs	r0, #17
 8000666:	f000 fbfc 	bl	8000e62 <HAL_NVIC_EnableIRQ>

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <MX_GPIO_Init+0xe0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a30      	ldr	r2, [pc, #192]	; (8000758 <MX_GPIO_Init+0xe0>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <MX_GPIO_Init+0xe0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <MX_GPIO_Init+0xe0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a29      	ldr	r2, [pc, #164]	; (8000758 <MX_GPIO_Init+0xe0>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b27      	ldr	r3, [pc, #156]	; (8000758 <MX_GPIO_Init+0xe0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b23      	ldr	r3, [pc, #140]	; (8000758 <MX_GPIO_Init+0xe0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a22      	ldr	r2, [pc, #136]	; (8000758 <MX_GPIO_Init+0xe0>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <MX_GPIO_Init+0xe0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_GPIO_Init+0xe0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <MX_GPIO_Init+0xe0>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_GPIO_Init+0xe0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2110      	movs	r1, #16
 8000702:	4816      	ldr	r0, [pc, #88]	; (800075c <MX_GPIO_Init+0xe4>)
 8000704:	f001 fa60 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000708:	2310      	movs	r3, #16
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	480f      	ldr	r0, [pc, #60]	; (800075c <MX_GPIO_Init+0xe4>)
 8000720:	f000 ffd2 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <MX_GPIO_Init+0xe4>)
 800073c:	f000 ffc4 	bl	80016c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2017      	movs	r0, #23
 8000746:	f000 fb70 	bl	8000e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800074a:	2017      	movs	r0, #23
 800074c:	f000 fb89 	bl	8000e62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40020400 	.word	0x40020400

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <HAL_MspInit+0x4c>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a4b      	ldr	r2, [pc, #300]	; (8000908 <HAL_I2C_MspInit+0x14c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	f040 8090 	bne.w	8000900 <HAL_I2C_MspInit+0x144>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	4b49      	ldr	r3, [pc, #292]	; (800090c <HAL_I2C_MspInit+0x150>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a48      	ldr	r2, [pc, #288]	; (800090c <HAL_I2C_MspInit+0x150>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
 80007f0:	4b46      	ldr	r3, [pc, #280]	; (800090c <HAL_I2C_MspInit+0x150>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007fc:	23c0      	movs	r3, #192	; 0xc0
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000800:	2312      	movs	r3, #18
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080c:	2304      	movs	r3, #4
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	483e      	ldr	r0, [pc, #248]	; (8000910 <HAL_I2C_MspInit+0x154>)
 8000818:	f000 ff56 	bl	80016c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4b3a      	ldr	r3, [pc, #232]	; (800090c <HAL_I2C_MspInit+0x150>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a39      	ldr	r2, [pc, #228]	; (800090c <HAL_I2C_MspInit+0x150>)
 8000826:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
 800082c:	4b37      	ldr	r3, [pc, #220]	; (800090c <HAL_I2C_MspInit+0x150>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000838:	4b36      	ldr	r3, [pc, #216]	; (8000914 <HAL_I2C_MspInit+0x158>)
 800083a:	4a37      	ldr	r2, [pc, #220]	; (8000918 <HAL_I2C_MspInit+0x15c>)
 800083c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <HAL_I2C_MspInit+0x158>)
 8000840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000844:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000846:	4b33      	ldr	r3, [pc, #204]	; (8000914 <HAL_I2C_MspInit+0x158>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800084c:	4b31      	ldr	r3, [pc, #196]	; (8000914 <HAL_I2C_MspInit+0x158>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <HAL_I2C_MspInit+0x158>)
 8000854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000858:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <HAL_I2C_MspInit+0x158>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <HAL_I2C_MspInit+0x158>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <HAL_I2C_MspInit+0x158>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <HAL_I2C_MspInit+0x158>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <HAL_I2C_MspInit+0x158>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000878:	4826      	ldr	r0, [pc, #152]	; (8000914 <HAL_I2C_MspInit+0x158>)
 800087a:	f000 fb1b 	bl	8000eb4 <HAL_DMA_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000884:	f7ff ff6c 	bl	8000760 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a22      	ldr	r2, [pc, #136]	; (8000914 <HAL_I2C_MspInit+0x158>)
 800088c:	639a      	str	r2, [r3, #56]	; 0x38
 800088e:	4a21      	ldr	r2, [pc, #132]	; (8000914 <HAL_I2C_MspInit+0x158>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <HAL_I2C_MspInit+0x160>)
 8000896:	4a22      	ldr	r2, [pc, #136]	; (8000920 <HAL_I2C_MspInit+0x164>)
 8000898:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <HAL_I2C_MspInit+0x160>)
 800089c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008a0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <HAL_I2C_MspInit+0x160>)
 80008a4:	2240      	movs	r2, #64	; 0x40
 80008a6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <HAL_I2C_MspInit+0x160>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <HAL_I2C_MspInit+0x160>)
 80008b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_I2C_MspInit+0x160>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <HAL_I2C_MspInit+0x160>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <HAL_I2C_MspInit+0x160>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_I2C_MspInit+0x160>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <HAL_I2C_MspInit+0x160>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80008d4:	4811      	ldr	r0, [pc, #68]	; (800091c <HAL_I2C_MspInit+0x160>)
 80008d6:	f000 faed 	bl	8000eb4 <HAL_DMA_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 80008e0:	f7ff ff3e 	bl	8000760 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a0d      	ldr	r2, [pc, #52]	; (800091c <HAL_I2C_MspInit+0x160>)
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ea:	4a0c      	ldr	r2, [pc, #48]	; (800091c <HAL_I2C_MspInit+0x160>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	201f      	movs	r0, #31
 80008f6:	f000 fa98 	bl	8000e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008fa:	201f      	movs	r0, #31
 80008fc:	f000 fab1 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	; 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40005400 	.word	0x40005400
 800090c:	40023800 	.word	0x40023800
 8000910:	40020400 	.word	0x40020400
 8000914:	2000007c 	.word	0x2000007c
 8000918:	40026010 	.word	0x40026010
 800091c:	200000dc 	.word	0x200000dc
 8000920:	400260a0 	.word	0x400260a0

08000924 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a10      	ldr	r2, [pc, #64]	; (8000974 <HAL_I2C_MspDeInit+0x50>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d11a      	bne.n	800096c <HAL_I2C_MspDeInit+0x48>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_I2C_MspDeInit+0x54>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_I2C_MspDeInit+0x54>)
 800093c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000942:	2140      	movs	r1, #64	; 0x40
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <HAL_I2C_MspDeInit+0x58>)
 8000946:	f001 f843 	bl	80019d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800094a:	2180      	movs	r1, #128	; 0x80
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <HAL_I2C_MspDeInit+0x58>)
 800094e:	f001 f83f 	bl	80019d0 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fb5a 	bl	8001010 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fb55 	bl	8001010 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8000966:	201f      	movs	r0, #31
 8000968:	f000 fa89 	bl	8000e7e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40005400 	.word	0x40005400
 8000978:	40023800 	.word	0x40023800
 800097c:	40020400 	.word	0x40020400

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 f8ea 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  GT911_Scan();
 80009d0:	f004 fa36 	bl	8004e40 <GT911_Scan>
  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80009d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	if(__HAL_DMA_GET_TC_FLAG_INDEX(&hdma_i2c1_rx))	//DMA传输完�?判断
	{
		GTDMAReadOK_F = 1;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <DMA1_Stream0_IRQHandler+0x4c>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
		memcpy(GT911buf, DMAbuf, sizeof(DMAbuf));
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <DMA1_Stream0_IRQHandler+0x50>)
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <DMA1_Stream0_IRQHandler+0x54>)
 80009e6:	4610      	mov	r0, r2
 80009e8:	f103 0420 	add.w	r4, r3, #32
 80009ec:	4602      	mov	r2, r0
 80009ee:	4619      	mov	r1, r3
 80009f0:	f8d1 c000 	ldr.w	ip, [r1]
 80009f4:	684e      	ldr	r6, [r1, #4]
 80009f6:	688d      	ldr	r5, [r1, #8]
 80009f8:	68c9      	ldr	r1, [r1, #12]
 80009fa:	f8c2 c000 	str.w	ip, [r2]
 80009fe:	6056      	str	r6, [r2, #4]
 8000a00:	6095      	str	r5, [r2, #8]
 8000a02:	60d1      	str	r1, [r2, #12]
 8000a04:	3310      	adds	r3, #16
 8000a06:	3010      	adds	r0, #16
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d1ef      	bne.n	80009ec <DMA1_Stream0_IRQHandler+0x14>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	6859      	ldr	r1, [r3, #4]
 8000a12:	6010      	str	r0, [r2, #0]
 8000a14:	6051      	str	r1, [r2, #4]
 8000a16:	7a1b      	ldrb	r3, [r3, #8]
 8000a18:	7213      	strb	r3, [r2, #8]
	}

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <DMA1_Stream0_IRQHandler+0x58>)
 8000a1c:	f000 fbd0 	bl	80011c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a24:	20000140 	.word	0x20000140
 8000a28:	20000170 	.word	0x20000170
 8000a2c:	20000144 	.word	0x20000144
 8000a30:	2000007c 	.word	0x2000007c

08000a34 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	if(__HAL_DMA_GET_TC_FLAG_INDEX(&hdma_i2c1_tx))	//DMA传输完�?判断
	{
		GTDMASendOK_F = 1;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <DMA1_Stream6_IRQHandler+0x14>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <DMA1_Stream6_IRQHandler+0x18>)
 8000a40:	f000 fbbe 	bl	80011c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000141 	.word	0x20000141
 8000a4c:	200000dc 	.word	0x200000dc

08000a50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	  if(Dev_Now.GT911_RST)
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <EXTI9_5_IRQHandler+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d002      	beq.n	8000a62 <EXTI9_5_IRQHandler+0x12>
	  {
		  	  Dev_Now.Touch =1;
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <EXTI9_5_IRQHandler+0x20>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	705a      	strb	r2, [r3, #1]
	  }

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000a62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a66:	f001 f8c9 	bl	8001bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000019c 	.word	0x2000019c

08000a74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <I2C1_EV_IRQHandler+0x10>)
 8000a7a:	f001 fd4f 	bl	800251c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000028 	.word	0x20000028

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab2:	490e      	ldr	r1, [pc, #56]	; (8000aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac8:	4c0b      	ldr	r4, [pc, #44]	; (8000af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ad6:	f7ff ffd7 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f004 fbb9 	bl	8005250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fcfd 	bl	80004dc <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af0:	080052f0 	.word	0x080052f0
  ldr r2, =_sbss
 8000af4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af8:	200001ec 	.word	0x200001ec

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_Init+0x40>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_Init+0x40>)
 8000b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x40>)
 8000b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f973 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f000 f808 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fe1a 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023c00 	.word	0x40023c00

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x54>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x58>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f999 	bl	8000e9a <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00e      	b.n	8000b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d80a      	bhi.n	8000b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f000 f953 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_InitTick+0x5c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x20>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	2000013c 	.word	0x2000013c

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_GetTick+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	2000013c 	.word	0x2000013c

08000be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bec:	f7ff ffee 	bl	8000bcc <HAL_GetTick>
 8000bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfc:	d005      	beq.n	8000c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_Delay+0x44>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c0a:	bf00      	nop
 8000c0c:	f7ff ffde 	bl	8000bcc <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d8f7      	bhi.n	8000c0c <HAL_Delay+0x28>
  {
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008

08000c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <__NVIC_GetPriorityGrouping+0x18>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	f003 0307 	and.w	r3, r3, #7
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	db0b      	blt.n	8000cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 021f 	and.w	r2, r3, #31
 8000ca8:	4907      	ldr	r1, [pc, #28]	; (8000cc8 <__NVIC_EnableIRQ+0x38>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db12      	blt.n	8000d04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	490a      	ldr	r1, [pc, #40]	; (8000d10 <__NVIC_DisableIRQ+0x44>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	3320      	adds	r3, #32
 8000cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf8:	f3bf 8f4f 	dsb	sy
}
 8000cfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cfe:	f3bf 8f6f 	isb	sy
}
 8000d02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f7ff ff8e 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff05 	bl	8000c2c <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff1a 	bl	8000c74 <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff8e 	bl	8000d68 <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff0d 	bl	8000c90 <__NVIC_EnableIRQ>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff1d 	bl	8000ccc <__NVIC_DisableIRQ>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff94 	bl	8000dd0 <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff fe84 	bl	8000bcc <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e099      	b.n	8001004 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0201 	bic.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ef0:	e00f      	b.n	8000f12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ef2:	f7ff fe6b 	bl	8000bcc <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	d908      	bls.n	8000f12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2220      	movs	r2, #32
 8000f04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e078      	b.n	8001004 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1e8      	bne.n	8000ef2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <HAL_DMA_Init+0x158>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d107      	bne.n	8000f7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	4313      	orrs	r3, r2
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f023 0307 	bic.w	r3, r3, #7
 8000f92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d117      	bne.n	8000fd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00e      	beq.n	8000fd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 fb09 	bl	80015d0 <DMA_CheckFifoParam>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d008      	beq.n	8000fd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2240      	movs	r2, #64	; 0x40
 8000fc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e016      	b.n	8001004 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fac0 	bl	8001564 <DMA_CalcBaseAndBitshift>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fec:	223f      	movs	r2, #63	; 0x3f
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	f010803f 	.word	0xf010803f

08001010 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e050      	b.n	80010c4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d101      	bne.n	8001032 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800102e:	2302      	movs	r3, #2
 8001030:	e048      	b.n	80010c4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0201 	bic.w	r2, r2, #1
 8001040:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2221      	movs	r2, #33	; 0x21
 8001070:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fa76 	bl	8001564 <DMA_CalcBaseAndBitshift>
 8001078:	4603      	mov	r3, r0
 800107a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a4:	223f      	movs	r2, #63	; 0x3f
 80010a6:	409a      	lsls	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <HAL_DMA_Start_IT+0x26>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e040      	b.n	8001174 <HAL_DMA_Start_IT+0xa8>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b01      	cmp	r3, #1
 8001104:	d12f      	bne.n	8001166 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2202      	movs	r2, #2
 800110a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 f9f4 	bl	8001508 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001124:	223f      	movs	r2, #63	; 0x3f
 8001126:	409a      	lsls	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0216 	orr.w	r2, r2, #22
 800113a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	2b00      	cmp	r3, #0
 8001142:	d007      	beq.n	8001154 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0208 	orr.w	r2, r2, #8
 8001152:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e005      	b.n	8001172 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800116e:	2302      	movs	r3, #2
 8001170:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001172:	7dfb      	ldrb	r3, [r7, #23]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d004      	beq.n	800119a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00c      	b.n	80011b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2205      	movs	r2, #5
 800119e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0201 	bic.w	r2, r2, #1
 80011b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011cc:	4b8e      	ldr	r3, [pc, #568]	; (8001408 <HAL_DMA_IRQHandler+0x248>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a8e      	ldr	r2, [pc, #568]	; (800140c <HAL_DMA_IRQHandler+0x24c>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0a9b      	lsrs	r3, r3, #10
 80011d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ea:	2208      	movs	r2, #8
 80011ec:	409a      	lsls	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d01a      	beq.n	800122c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0204 	bic.w	r2, r2, #4
 8001212:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001218:	2208      	movs	r2, #8
 800121a:	409a      	lsls	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	2201      	movs	r2, #1
 8001232:	409a      	lsls	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d012      	beq.n	8001262 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124e:	2201      	movs	r2, #1
 8001250:	409a      	lsls	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125a:	f043 0202 	orr.w	r2, r3, #2
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	2204      	movs	r2, #4
 8001268:	409a      	lsls	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d012      	beq.n	8001298 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00b      	beq.n	8001298 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001284:	2204      	movs	r2, #4
 8001286:	409a      	lsls	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001290:	f043 0204 	orr.w	r2, r3, #4
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129c:	2210      	movs	r2, #16
 800129e:	409a      	lsls	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d043      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d03c      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ba:	2210      	movs	r2, #16
 80012bc:	409a      	lsls	r2, r3
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d018      	beq.n	8001302 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d108      	bne.n	80012f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d024      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	4798      	blx	r3
 80012ee:	e01f      	b.n	8001330 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01b      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	4798      	blx	r3
 8001300:	e016      	b.n	8001330 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d107      	bne.n	8001320 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0208 	bic.w	r2, r2, #8
 800131e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2220      	movs	r2, #32
 8001336:	409a      	lsls	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 808f 	beq.w	8001460 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8087 	beq.w	8001460 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001356:	2220      	movs	r2, #32
 8001358:	409a      	lsls	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b05      	cmp	r3, #5
 8001368:	d136      	bne.n	80013d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0216 	bic.w	r2, r2, #22
 8001378:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	695a      	ldr	r2, [r3, #20]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001388:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	2b00      	cmp	r3, #0
 8001390:	d103      	bne.n	800139a <HAL_DMA_IRQHandler+0x1da>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001396:	2b00      	cmp	r3, #0
 8001398:	d007      	beq.n	80013aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0208 	bic.w	r2, r2, #8
 80013a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ae:	223f      	movs	r2, #63	; 0x3f
 80013b0:	409a      	lsls	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d07e      	beq.n	80014cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	4798      	blx	r3
        }
        return;
 80013d6:	e079      	b.n	80014cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01d      	beq.n	8001422 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10d      	bne.n	8001410 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d031      	beq.n	8001460 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	4798      	blx	r3
 8001404:	e02c      	b.n	8001460 <HAL_DMA_IRQHandler+0x2a0>
 8001406:	bf00      	nop
 8001408:	20000000 	.word	0x20000000
 800140c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d023      	beq.n	8001460 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	4798      	blx	r3
 8001420:	e01e      	b.n	8001460 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10f      	bne.n	8001450 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0210 	bic.w	r2, r2, #16
 800143e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	2b00      	cmp	r3, #0
 8001466:	d032      	beq.n	80014ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d022      	beq.n	80014ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2205      	movs	r2, #5
 8001478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3301      	adds	r3, #1
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	d307      	bcc.n	80014a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f2      	bne.n	800148c <HAL_DMA_IRQHandler+0x2cc>
 80014a6:	e000      	b.n	80014aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80014a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	4798      	blx	r3
 80014ca:	e000      	b.n	80014ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80014cc:	bf00      	nop
    }
  }
}
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e2:	b2db      	uxtb	r3, r3
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001524:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b40      	cmp	r3, #64	; 0x40
 8001534:	d108      	bne.n	8001548 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001546:	e007      	b.n	8001558 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	60da      	str	r2, [r3, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	3b10      	subs	r3, #16
 8001574:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <DMA_CalcBaseAndBitshift+0x64>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800157e:	4a13      	ldr	r2, [pc, #76]	; (80015cc <DMA_CalcBaseAndBitshift+0x68>)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d909      	bls.n	80015a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800159a:	f023 0303 	bic.w	r3, r3, #3
 800159e:	1d1a      	adds	r2, r3, #4
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	659a      	str	r2, [r3, #88]	; 0x58
 80015a4:	e007      	b.n	80015b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015ae:	f023 0303 	bic.w	r3, r3, #3
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	aaaaaaab 	.word	0xaaaaaaab
 80015cc:	080052d8 	.word	0x080052d8

080015d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d11f      	bne.n	800162a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d856      	bhi.n	800169e <DMA_CheckFifoParam+0xce>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <DMA_CheckFifoParam+0x28>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	08001609 	.word	0x08001609
 80015fc:	0800161b 	.word	0x0800161b
 8001600:	08001609 	.word	0x08001609
 8001604:	0800169f 	.word	0x0800169f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d046      	beq.n	80016a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001618:	e043      	b.n	80016a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001622:	d140      	bne.n	80016a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001628:	e03d      	b.n	80016a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001632:	d121      	bne.n	8001678 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d837      	bhi.n	80016aa <DMA_CheckFifoParam+0xda>
 800163a:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <DMA_CheckFifoParam+0x70>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001651 	.word	0x08001651
 8001644:	08001657 	.word	0x08001657
 8001648:	08001651 	.word	0x08001651
 800164c:	08001669 	.word	0x08001669
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
      break;
 8001654:	e030      	b.n	80016b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d025      	beq.n	80016ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001666:	e022      	b.n	80016ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001670:	d11f      	bne.n	80016b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001676:	e01c      	b.n	80016b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d903      	bls.n	8001686 <DMA_CheckFifoParam+0xb6>
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b03      	cmp	r3, #3
 8001682:	d003      	beq.n	800168c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001684:	e018      	b.n	80016b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
      break;
 800168a:	e015      	b.n	80016b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00e      	beq.n	80016b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
      break;
 800169c:	e00b      	b.n	80016b6 <DMA_CheckFifoParam+0xe6>
      break;
 800169e:	bf00      	nop
 80016a0:	e00a      	b.n	80016b8 <DMA_CheckFifoParam+0xe8>
      break;
 80016a2:	bf00      	nop
 80016a4:	e008      	b.n	80016b8 <DMA_CheckFifoParam+0xe8>
      break;
 80016a6:	bf00      	nop
 80016a8:	e006      	b.n	80016b8 <DMA_CheckFifoParam+0xe8>
      break;
 80016aa:	bf00      	nop
 80016ac:	e004      	b.n	80016b8 <DMA_CheckFifoParam+0xe8>
      break;
 80016ae:	bf00      	nop
 80016b0:	e002      	b.n	80016b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80016b2:	bf00      	nop
 80016b4:	e000      	b.n	80016b8 <DMA_CheckFifoParam+0xe8>
      break;
 80016b6:	bf00      	nop
    }
  } 
  
  return status; 
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	e159      	b.n	8001998 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e4:	2201      	movs	r2, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	f040 8148 	bne.w	8001992 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d005      	beq.n	800171a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001716:	2b02      	cmp	r3, #2
 8001718:	d130      	bne.n	800177c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 0201 	and.w	r2, r3, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b03      	cmp	r3, #3
 8001786:	d017      	beq.n	80017b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2203      	movs	r2, #3
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d123      	bne.n	800180c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	08da      	lsrs	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3208      	adds	r2, #8
 8001806:	69b9      	ldr	r1, [r7, #24]
 8001808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0203 	and.w	r2, r3, #3
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80a2 	beq.w	8001992 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b57      	ldr	r3, [pc, #348]	; (80019b0 <HAL_GPIO_Init+0x2e8>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	4a56      	ldr	r2, [pc, #344]	; (80019b0 <HAL_GPIO_Init+0x2e8>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185c:	6453      	str	r3, [r2, #68]	; 0x44
 800185e:	4b54      	ldr	r3, [pc, #336]	; (80019b0 <HAL_GPIO_Init+0x2e8>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186a:	4a52      	ldr	r2, [pc, #328]	; (80019b4 <HAL_GPIO_Init+0x2ec>)
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a49      	ldr	r2, [pc, #292]	; (80019b8 <HAL_GPIO_Init+0x2f0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d019      	beq.n	80018ca <HAL_GPIO_Init+0x202>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a48      	ldr	r2, [pc, #288]	; (80019bc <HAL_GPIO_Init+0x2f4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <HAL_GPIO_Init+0x1fe>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a47      	ldr	r2, [pc, #284]	; (80019c0 <HAL_GPIO_Init+0x2f8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00d      	beq.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a46      	ldr	r2, [pc, #280]	; (80019c4 <HAL_GPIO_Init+0x2fc>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d007      	beq.n	80018be <HAL_GPIO_Init+0x1f6>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a45      	ldr	r2, [pc, #276]	; (80019c8 <HAL_GPIO_Init+0x300>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_GPIO_Init+0x1f2>
 80018b6:	2304      	movs	r3, #4
 80018b8:	e008      	b.n	80018cc <HAL_GPIO_Init+0x204>
 80018ba:	2307      	movs	r3, #7
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x204>
 80018be:	2303      	movs	r3, #3
 80018c0:	e004      	b.n	80018cc <HAL_GPIO_Init+0x204>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_Init+0x204>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_GPIO_Init+0x204>
 80018ca:	2300      	movs	r3, #0
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	f002 0203 	and.w	r2, r2, #3
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	4093      	lsls	r3, r2
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018dc:	4935      	ldr	r1, [pc, #212]	; (80019b4 <HAL_GPIO_Init+0x2ec>)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ea:	4b38      	ldr	r3, [pc, #224]	; (80019cc <HAL_GPIO_Init+0x304>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800190e:	4a2f      	ldr	r2, [pc, #188]	; (80019cc <HAL_GPIO_Init+0x304>)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_GPIO_Init+0x304>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001938:	4a24      	ldr	r2, [pc, #144]	; (80019cc <HAL_GPIO_Init+0x304>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800193e:	4b23      	ldr	r3, [pc, #140]	; (80019cc <HAL_GPIO_Init+0x304>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001962:	4a1a      	ldr	r2, [pc, #104]	; (80019cc <HAL_GPIO_Init+0x304>)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_GPIO_Init+0x304>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800198c:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <HAL_GPIO_Init+0x304>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3301      	adds	r3, #1
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b0f      	cmp	r3, #15
 800199c:	f67f aea2 	bls.w	80016e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40013800 	.word	0x40013800
 80019b8:	40020000 	.word	0x40020000
 80019bc:	40020400 	.word	0x40020400
 80019c0:	40020800 	.word	0x40020800
 80019c4:	40020c00 	.word	0x40020c00
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40013c00 	.word	0x40013c00

080019d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e0bb      	b.n	8001b64 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ec:	2201      	movs	r2, #1
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	f040 80ab 	bne.w	8001b5e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001a08:	4a5c      	ldr	r2, [pc, #368]	; (8001b7c <HAL_GPIO_DeInit+0x1ac>)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	4013      	ands	r3, r2
 8001a28:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a54      	ldr	r2, [pc, #336]	; (8001b80 <HAL_GPIO_DeInit+0x1b0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d019      	beq.n	8001a66 <HAL_GPIO_DeInit+0x96>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a53      	ldr	r2, [pc, #332]	; (8001b84 <HAL_GPIO_DeInit+0x1b4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_GPIO_DeInit+0x92>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a52      	ldr	r2, [pc, #328]	; (8001b88 <HAL_GPIO_DeInit+0x1b8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00d      	beq.n	8001a5e <HAL_GPIO_DeInit+0x8e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a51      	ldr	r2, [pc, #324]	; (8001b8c <HAL_GPIO_DeInit+0x1bc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d007      	beq.n	8001a5a <HAL_GPIO_DeInit+0x8a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a50      	ldr	r2, [pc, #320]	; (8001b90 <HAL_GPIO_DeInit+0x1c0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_GPIO_DeInit+0x86>
 8001a52:	2304      	movs	r3, #4
 8001a54:	e008      	b.n	8001a68 <HAL_GPIO_DeInit+0x98>
 8001a56:	2307      	movs	r3, #7
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_DeInit+0x98>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e004      	b.n	8001a68 <HAL_GPIO_DeInit+0x98>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_DeInit+0x98>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_GPIO_DeInit+0x98>
 8001a66:	2300      	movs	r3, #0
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	f002 0203 	and.w	r2, r2, #3
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	4093      	lsls	r3, r2
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d132      	bne.n	8001ade <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001a78:	4b46      	ldr	r3, [pc, #280]	; (8001b94 <HAL_GPIO_DeInit+0x1c4>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	4944      	ldr	r1, [pc, #272]	; (8001b94 <HAL_GPIO_DeInit+0x1c4>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001a86:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_GPIO_DeInit+0x1c4>)
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4941      	ldr	r1, [pc, #260]	; (8001b94 <HAL_GPIO_DeInit+0x1c4>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001a94:	4b3f      	ldr	r3, [pc, #252]	; (8001b94 <HAL_GPIO_DeInit+0x1c4>)
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	493d      	ldr	r1, [pc, #244]	; (8001b94 <HAL_GPIO_DeInit+0x1c4>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <HAL_GPIO_DeInit+0x1c4>)
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	493a      	ldr	r1, [pc, #232]	; (8001b94 <HAL_GPIO_DeInit+0x1c4>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ac0:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <HAL_GPIO_DeInit+0x1ac>)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	482a      	ldr	r0, [pc, #168]	; (8001b7c <HAL_GPIO_DeInit+0x1ac>)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	400a      	ands	r2, r1
 8001ad8:	3302      	adds	r3, #2
 8001ada:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2103      	movs	r1, #3
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	401a      	ands	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	08d2      	lsrs	r2, r2, #3
 8001b14:	4019      	ands	r1, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2103      	movs	r1, #3
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	401a      	ands	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2103      	movs	r1, #3
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	401a      	ands	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	f67f af40 	bls.w	80019ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	371c      	adds	r7, #28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020400 	.word	0x40020400
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40013c00 	.word	0x40013c00

08001b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e001      	b.n	8001bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001be4:	e003      	b.n	8001bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	041a      	lsls	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	619a      	str	r2, [r3, #24]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f806 	bl	8001c2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40013c00 	.word	0x40013c00

08001c2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e12b      	b.n	8001eae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7fe fda6 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2224      	movs	r2, #36	; 0x24
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0201 	bic.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ca8:	f003 f804 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 8001cac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4a81      	ldr	r2, [pc, #516]	; (8001eb8 <HAL_I2C_Init+0x274>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d807      	bhi.n	8001cc8 <HAL_I2C_Init+0x84>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a80      	ldr	r2, [pc, #512]	; (8001ebc <HAL_I2C_Init+0x278>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	bf94      	ite	ls
 8001cc0:	2301      	movls	r3, #1
 8001cc2:	2300      	movhi	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	e006      	b.n	8001cd6 <HAL_I2C_Init+0x92>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4a7d      	ldr	r2, [pc, #500]	; (8001ec0 <HAL_I2C_Init+0x27c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	bf94      	ite	ls
 8001cd0:	2301      	movls	r3, #1
 8001cd2:	2300      	movhi	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0e7      	b.n	8001eae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4a78      	ldr	r2, [pc, #480]	; (8001ec4 <HAL_I2C_Init+0x280>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	0c9b      	lsrs	r3, r3, #18
 8001ce8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4a6a      	ldr	r2, [pc, #424]	; (8001eb8 <HAL_I2C_Init+0x274>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d802      	bhi.n	8001d18 <HAL_I2C_Init+0xd4>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3301      	adds	r3, #1
 8001d16:	e009      	b.n	8001d2c <HAL_I2C_Init+0xe8>
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	4a69      	ldr	r2, [pc, #420]	; (8001ec8 <HAL_I2C_Init+0x284>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	495c      	ldr	r1, [pc, #368]	; (8001eb8 <HAL_I2C_Init+0x274>)
 8001d48:	428b      	cmp	r3, r1
 8001d4a:	d819      	bhi.n	8001d80 <HAL_I2C_Init+0x13c>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1e59      	subs	r1, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d5a:	1c59      	adds	r1, r3, #1
 8001d5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d60:	400b      	ands	r3, r1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <HAL_I2C_Init+0x138>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1e59      	subs	r1, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7a:	e051      	b.n	8001e20 <HAL_I2C_Init+0x1dc>
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	e04f      	b.n	8001e20 <HAL_I2C_Init+0x1dc>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d111      	bne.n	8001dac <HAL_I2C_Init+0x168>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1e58      	subs	r0, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	440b      	add	r3, r1
 8001d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	e012      	b.n	8001dd2 <HAL_I2C_Init+0x18e>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e58      	subs	r0, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	0099      	lsls	r1, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf0c      	ite	eq
 8001dcc:	2301      	moveq	r3, #1
 8001dce:	2300      	movne	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Init+0x196>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e022      	b.n	8001e20 <HAL_I2C_Init+0x1dc>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10e      	bne.n	8001e00 <HAL_I2C_Init+0x1bc>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1e58      	subs	r0, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	440b      	add	r3, r1
 8001df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df4:	3301      	adds	r3, #1
 8001df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dfe:	e00f      	b.n	8001e20 <HAL_I2C_Init+0x1dc>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1e58      	subs	r0, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	0099      	lsls	r1, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	6809      	ldr	r1, [r1, #0]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6911      	ldr	r1, [r2, #16]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68d2      	ldr	r2, [r2, #12]
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	000186a0 	.word	0x000186a0
 8001ebc:	001e847f 	.word	0x001e847f
 8001ec0:	003d08ff 	.word	0x003d08ff
 8001ec4:	431bde83 	.word	0x431bde83
 8001ec8:	10624dd3 	.word	0x10624dd3

08001ecc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e021      	b.n	8001f22 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2224      	movs	r2, #36	; 0x24
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fd14 	bl	8000924 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	817b      	strh	r3, [r7, #10]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	813b      	strh	r3, [r7, #8]
 8001f42:	4613      	mov	r3, r2
 8001f44:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f4a:	f7fe fe3f 	bl	8000bcc <HAL_GetTick>
 8001f4e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	f040 8145 	bne.w	80021e8 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f5e:	4b9d      	ldr	r3, [pc, #628]	; (80021d4 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	08db      	lsrs	r3, r3, #3
 8001f64:	4a9c      	ldr	r2, [pc, #624]	; (80021d8 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0a1a      	lsrs	r2, r3, #8
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	009a      	lsls	r2, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d116      	bne.n	8001fb2 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f043 0220 	orr.w	r2, r3, #32
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e11b      	b.n	80021ea <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d0db      	beq.n	8001f78 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_I2C_Mem_Write_DMA+0xa2>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e10d      	b.n	80021ea <HAL_I2C_Mem_Write_DMA+0x2be>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d007      	beq.n	8001ff4 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2221      	movs	r2, #33	; 0x21
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2240      	movs	r2, #64	; 0x40
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800201e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4a6a      	ldr	r2, [pc, #424]	; (80021dc <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002036:	897a      	ldrh	r2, [r7, #10]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800203c:	893a      	ldrh	r2, [r7, #8]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002042:	88fa      	ldrh	r2, [r7, #6]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80a9 	beq.w	80021aa <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	2b00      	cmp	r3, #0
 800205e:	d02a      	beq.n	80020b6 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002064:	4a5e      	ldr	r2, [pc, #376]	; (80021e0 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	4a5d      	ldr	r2, [pc, #372]	; (80021e4 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800206e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	2200      	movs	r2, #0
 8002076:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207c:	2200      	movs	r2, #0
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	2200      	movs	r2, #0
 8002086:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	2200      	movs	r2, #0
 800208e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3310      	adds	r3, #16
 80020a0:	461a      	mov	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	f7ff f811 	bl	80010cc <HAL_DMA_Start_IT>
 80020aa:	4603      	mov	r3, r0
 80020ac:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80020ae:	7efb      	ldrb	r3, [r7, #27]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d166      	bne.n	8002182 <HAL_I2C_Mem_Write_DMA+0x256>
 80020b4:	e013      	b.n	80020de <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e085      	b.n	80021ea <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80020de:	88f8      	ldrh	r0, [r7, #6]
 80020e0:	893a      	ldrh	r2, [r7, #8]
 80020e2:	8979      	ldrh	r1, [r7, #10]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	2323      	movs	r3, #35	; 0x23
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	4603      	mov	r3, r0
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f001 fce4 	bl	8003abc <I2C_RequestMemoryWrite>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d022      	beq.n	8002140 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f83c 	bl	800117c <HAL_DMA_Abort_IT>
 8002104:	4603      	mov	r3, r0
 8002106:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210c:	2200      	movs	r2, #0
 800210e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800211e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e054      	b.n	80021ea <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800216c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e033      	b.n	80021ea <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f043 0210 	orr.w	r2, r3, #16
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e01f      	b.n	80021ea <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00b      	b.n	80021ea <HAL_I2C_Mem_Write_DMA+0x2be>
 80021d2:	bf00      	nop
 80021d4:	20000000 	.word	0x20000000
 80021d8:	14f8b589 	.word	0x14f8b589
 80021dc:	ffff0000 	.word	0xffff0000
 80021e0:	08003db9 	.word	0x08003db9
 80021e4:	08003f63 	.word	0x08003f63
    }
  }
  else
  {
    return HAL_BUSY;
 80021e8:	2302      	movs	r3, #2
  }
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3720      	adds	r7, #32
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop

080021f4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	4608      	mov	r0, r1
 80021fe:	4611      	mov	r1, r2
 8002200:	461a      	mov	r2, r3
 8002202:	4603      	mov	r3, r0
 8002204:	817b      	strh	r3, [r7, #10]
 8002206:	460b      	mov	r3, r1
 8002208:	813b      	strh	r3, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800220e:	f7fe fcdd 	bl	8000bcc <HAL_GetTick>
 8002212:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b20      	cmp	r3, #32
 8002222:	f040 8176 	bne.w	8002512 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002226:	4b95      	ldr	r3, [pc, #596]	; (800247c <HAL_I2C_Mem_Read_DMA+0x288>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	08db      	lsrs	r3, r3, #3
 800222c:	4a94      	ldr	r2, [pc, #592]	; (8002480 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	0a1a      	lsrs	r2, r3, #8
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	009a      	lsls	r2, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	3b01      	subs	r3, #1
 8002244:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d116      	bne.n	800227a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f043 0220 	orr.w	r2, r3, #32
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e14c      	b.n	8002514 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b02      	cmp	r3, #2
 8002286:	d0db      	beq.n	8002240 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_I2C_Mem_Read_DMA+0xa2>
 8002292:	2302      	movs	r3, #2
 8002294:	e13e      	b.n	8002514 <HAL_I2C_Mem_Read_DMA+0x320>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d007      	beq.n	80022bc <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2222      	movs	r2, #34	; 0x22
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2240      	movs	r2, #64	; 0x40
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a62      	ldr	r2, [pc, #392]	; (8002484 <HAL_I2C_Mem_Read_DMA+0x290>)
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80022fe:	897a      	ldrh	r2, [r7, #10]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002304:	893a      	ldrh	r2, [r7, #8]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800230a:	88fa      	ldrh	r2, [r7, #6]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80cc 	beq.w	80024b8 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	2b00      	cmp	r3, #0
 8002326:	d02d      	beq.n	8002384 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232c:	4a56      	ldr	r2, [pc, #344]	; (8002488 <HAL_I2C_Mem_Read_DMA+0x294>)
 800232e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	4a55      	ldr	r2, [pc, #340]	; (800248c <HAL_I2C_Mem_Read_DMA+0x298>)
 8002336:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	2200      	movs	r2, #0
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	2200      	movs	r2, #0
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	2200      	movs	r2, #0
 800234e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	2200      	movs	r2, #0
 8002356:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3310      	adds	r3, #16
 8002362:	4619      	mov	r1, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	461a      	mov	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236e:	f7fe fead 	bl	80010cc <HAL_DMA_Start_IT>
 8002372:	4603      	mov	r3, r0
 8002374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800237c:	2b00      	cmp	r3, #0
 800237e:	f040 8087 	bne.w	8002490 <HAL_I2C_Mem_Read_DMA+0x29c>
 8002382:	e013      	b.n	80023ac <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b3      	b.n	8002514 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80023ac:	88f8      	ldrh	r0, [r7, #6]
 80023ae:	893a      	ldrh	r2, [r7, #8]
 80023b0:	8979      	ldrh	r1, [r7, #10]
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	2323      	movs	r3, #35	; 0x23
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	4603      	mov	r3, r0
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f001 fc13 	bl	8003be8 <I2C_RequestMemoryRead>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d023      	beq.n	8002410 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fed5 	bl	800117c <HAL_DMA_Abort_IT>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	2200      	movs	r2, #0
 80023de:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e081      	b.n	8002514 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	2b01      	cmp	r3, #1
 8002416:	d108      	bne.n	800242a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e007      	b.n	800243a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002438:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002466:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	e049      	b.n	800250e <HAL_I2C_Mem_Read_DMA+0x31a>
 800247a:	bf00      	nop
 800247c:	20000000 	.word	0x20000000
 8002480:	14f8b589 	.word	0x14f8b589
 8002484:	ffff0000 	.word	0xffff0000
 8002488:	08003db9 	.word	0x08003db9
 800248c:	08003f63 	.word	0x08003f63
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f043 0210 	orr.w	r2, r3, #16
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e02d      	b.n	8002514 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80024b8:	88f8      	ldrh	r0, [r7, #6]
 80024ba:	893a      	ldrh	r2, [r7, #8]
 80024bc:	8979      	ldrh	r1, [r7, #10]
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	2323      	movs	r3, #35	; 0x23
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	4603      	mov	r3, r0
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f001 fb8d 	bl	8003be8 <I2C_RequestMemoryRead>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e01d      	b.n	8002514 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8002512:	2302      	movs	r3, #2
  }
}
 8002514:	4618      	mov	r0, r3
 8002516:	3728      	adds	r7, #40	; 0x28
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800253c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002544:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2b10      	cmp	r3, #16
 800254a:	d003      	beq.n	8002554 <HAL_I2C_EV_IRQHandler+0x38>
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b40      	cmp	r3, #64	; 0x40
 8002550:	f040 80c1 	bne.w	80026d6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10d      	bne.n	800258a <HAL_I2C_EV_IRQHandler+0x6e>
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002574:	d003      	beq.n	800257e <HAL_I2C_EV_IRQHandler+0x62>
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800257c:	d101      	bne.n	8002582 <HAL_I2C_EV_IRQHandler+0x66>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_I2C_EV_IRQHandler+0x68>
 8002582:	2300      	movs	r3, #0
 8002584:	2b01      	cmp	r3, #1
 8002586:	f000 8132 	beq.w	80027ee <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00c      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x92>
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	0a5b      	lsrs	r3, r3, #9
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d006      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f001 ff3c 	bl	800441e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fcdc 	bl	8002f64 <I2C_Master_SB>
 80025ac:	e092      	b.n	80026d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	08db      	lsrs	r3, r3, #3
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0xb2>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	0a5b      	lsrs	r3, r3, #9
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fd52 	bl	8003070 <I2C_Master_ADD10>
 80025cc:	e082      	b.n	80026d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_I2C_EV_IRQHandler+0xd2>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	0a5b      	lsrs	r3, r3, #9
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fd6c 	bl	80030c4 <I2C_Master_ADDR>
 80025ec:	e072      	b.n	80026d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d03b      	beq.n	8002672 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002608:	f000 80f3 	beq.w	80027f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	09db      	lsrs	r3, r3, #7
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00f      	beq.n	8002638 <HAL_I2C_EV_IRQHandler+0x11c>
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	0a9b      	lsrs	r3, r3, #10
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <HAL_I2C_EV_IRQHandler+0x11c>
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d103      	bne.n	8002638 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f94c 	bl	80028ce <I2C_MasterTransmit_TXE>
 8002636:	e04d      	b.n	80026d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80d6 	beq.w	80027f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	0a5b      	lsrs	r3, r3, #9
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80cf 	beq.w	80027f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002654:	7bbb      	ldrb	r3, [r7, #14]
 8002656:	2b21      	cmp	r3, #33	; 0x21
 8002658:	d103      	bne.n	8002662 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f9d3 	bl	8002a06 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002660:	e0c7      	b.n	80027f2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	f040 80c4 	bne.w	80027f2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fa41 	bl	8002af2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002670:	e0bf      	b.n	80027f2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800267c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002680:	f000 80b7 	beq.w	80027f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00f      	beq.n	80026b0 <HAL_I2C_EV_IRQHandler+0x194>
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	0a9b      	lsrs	r3, r3, #10
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d009      	beq.n	80026b0 <HAL_I2C_EV_IRQHandler+0x194>
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d103      	bne.n	80026b0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fab6 	bl	8002c1a <I2C_MasterReceive_RXNE>
 80026ae:	e011      	b.n	80026d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 809a 	beq.w	80027f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	0a5b      	lsrs	r3, r3, #9
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8093 	beq.w	80027f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fb5f 	bl	8002d90 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026d2:	e08e      	b.n	80027f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80026d4:	e08d      	b.n	80027f2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e007      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d012      	beq.n	800272a <HAL_I2C_EV_IRQHandler+0x20e>
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	0a5b      	lsrs	r3, r3, #9
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00c      	beq.n	800272a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002720:	69b9      	ldr	r1, [r7, #24]
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 ff1d 	bl	8003562 <I2C_Slave_ADDR>
 8002728:	e066      	b.n	80027f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_I2C_EV_IRQHandler+0x22e>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	0a5b      	lsrs	r3, r3, #9
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 ff58 	bl	80035f8 <I2C_Slave_STOPF>
 8002748:	e056      	b.n	80027f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800274a:	7bbb      	ldrb	r3, [r7, #14]
 800274c:	2b21      	cmp	r3, #33	; 0x21
 800274e:	d002      	beq.n	8002756 <HAL_I2C_EV_IRQHandler+0x23a>
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	2b29      	cmp	r3, #41	; 0x29
 8002754:	d125      	bne.n	80027a2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	09db      	lsrs	r3, r3, #7
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00f      	beq.n	8002782 <HAL_I2C_EV_IRQHandler+0x266>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	0a9b      	lsrs	r3, r3, #10
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_I2C_EV_IRQHandler+0x266>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fe33 	bl	80033e6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002780:	e039      	b.n	80027f6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d033      	beq.n	80027f6 <HAL_I2C_EV_IRQHandler+0x2da>
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	0a5b      	lsrs	r3, r3, #9
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d02d      	beq.n	80027f6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fe60 	bl	8003460 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027a0:	e029      	b.n	80027f6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00f      	beq.n	80027ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	0a9b      	lsrs	r3, r3, #10
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fe6b 	bl	80034a2 <I2C_SlaveReceive_RXNE>
 80027cc:	e014      	b.n	80027f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00e      	beq.n	80027f8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	0a5b      	lsrs	r3, r3, #9
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fe99 	bl	800351e <I2C_SlaveReceive_BTF>
 80027ec:	e004      	b.n	80027f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80027ee:	bf00      	nop
 80027f0:	e002      	b.n	80027f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027f6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	70fb      	strb	r3, [r7, #3]
 800285a:	4613      	mov	r3, r2
 800285c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d150      	bne.n	8002996 <I2C_MasterTransmit_TXE+0xc8>
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b21      	cmp	r3, #33	; 0x21
 80028f8:	d14d      	bne.n	8002996 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d01d      	beq.n	800293c <I2C_MasterTransmit_TXE+0x6e>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b20      	cmp	r3, #32
 8002904:	d01a      	beq.n	800293c <I2C_MasterTransmit_TXE+0x6e>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800290c:	d016      	beq.n	800293c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800291c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2211      	movs	r2, #17
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff62 	bl	80027fe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800293a:	e060      	b.n	80029fe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800294a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b40      	cmp	r3, #64	; 0x40
 8002974:	d107      	bne.n	8002986 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ff7d 	bl	800287e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002984:	e03b      	b.n	80029fe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff ff35 	bl	80027fe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002994:	e033      	b.n	80029fe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b21      	cmp	r3, #33	; 0x21
 800299a:	d005      	beq.n	80029a8 <I2C_MasterTransmit_TXE+0xda>
 800299c:	7bbb      	ldrb	r3, [r7, #14]
 800299e:	2b40      	cmp	r3, #64	; 0x40
 80029a0:	d12d      	bne.n	80029fe <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	2b22      	cmp	r3, #34	; 0x22
 80029a6:	d12a      	bne.n	80029fe <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d108      	bne.n	80029c4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80029c2:	e01c      	b.n	80029fe <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b40      	cmp	r3, #64	; 0x40
 80029ce:	d103      	bne.n	80029d8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f88e 	bl	8002af2 <I2C_MemoryTransmit_TXE_BTF>
}
 80029d6:	e012      	b.n	80029fe <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029fc:	e7ff      	b.n	80029fe <I2C_MasterTransmit_TXE+0x130>
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b21      	cmp	r3, #33	; 0x21
 8002a1e:	d164      	bne.n	8002aea <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d012      	beq.n	8002a50 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002a4e:	e04c      	b.n	8002aea <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d01d      	beq.n	8002a92 <I2C_MasterTransmit_BTF+0x8c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d01a      	beq.n	8002a92 <I2C_MasterTransmit_BTF+0x8c>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a62:	d016      	beq.n	8002a92 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a72:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2211      	movs	r2, #17
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff feb7 	bl	80027fe <HAL_I2C_MasterTxCpltCallback>
}
 8002a90:	e02b      	b.n	8002aea <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aa0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	d107      	bne.n	8002adc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fed2 	bl	800287e <HAL_I2C_MemTxCpltCallback>
}
 8002ada:	e006      	b.n	8002aea <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fe8a 	bl	80027fe <HAL_I2C_MasterTxCpltCallback>
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d11d      	bne.n	8002b46 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10b      	bne.n	8002b2a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	1c9a      	adds	r2, r3, #2
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002b28:	e073      	b.n	8002c12 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	121b      	asrs	r3, r3, #8
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b44:	e065      	b.n	8002c12 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10b      	bne.n	8002b66 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b64:	e055      	b.n	8002c12 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d151      	bne.n	8002c12 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b22      	cmp	r3, #34	; 0x22
 8002b72:	d10d      	bne.n	8002b90 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b82:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b8e:	e040      	b.n	8002c12 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d015      	beq.n	8002bc6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	2b21      	cmp	r3, #33	; 0x21
 8002b9e:	d112      	bne.n	8002bc6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002bc4:	e025      	b.n	8002c12 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d120      	bne.n	8002c12 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b21      	cmp	r3, #33	; 0x21
 8002bd4:	d11d      	bne.n	8002c12 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002be4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff fe36 	bl	800287e <HAL_I2C_MemTxCpltCallback>
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b22      	cmp	r3, #34	; 0x22
 8002c2c:	f040 80ac 	bne.w	8002d88 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d921      	bls.n	8002c82 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	f040 808c 	bne.w	8002d88 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002c80:	e082      	b.n	8002d88 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d075      	beq.n	8002d76 <I2C_MasterReceive_RXNE+0x15c>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d002      	beq.n	8002c96 <I2C_MasterReceive_RXNE+0x7c>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d16f      	bne.n	8002d76 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f001 fb60 	bl	800435c <I2C_WaitOnSTOPRequestThroughIT>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d142      	bne.n	8002d28 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cc0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d10a      	bne.n	8002d12 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff fdc1 	bl	8002892 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d10:	e03a      	b.n	8002d88 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2212      	movs	r2, #18
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff fd76 	bl	8002812 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d26:	e02f      	b.n	8002d88 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d36:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fd99 	bl	80028a6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d74:	e008      	b.n	8002d88 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d84:	605a      	str	r2, [r3, #4]
}
 8002d86:	e7ff      	b.n	8002d88 <I2C_MasterReceive_RXNE+0x16e>
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d11b      	bne.n	8002de0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002dde:	e0bd      	b.n	8002f5c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d129      	bne.n	8002e3e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d00a      	beq.n	8002e16 <I2C_MasterReceive_BTF+0x86>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d007      	beq.n	8002e16 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e14:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e3c:	e08e      	b.n	8002f5c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d176      	bne.n	8002f36 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d002      	beq.n	8002e54 <I2C_MasterReceive_BTF+0xc4>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d108      	bne.n	8002e66 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e019      	b.n	8002e9a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d002      	beq.n	8002e72 <I2C_MasterReceive_BTF+0xe2>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d108      	bne.n	8002e84 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e00a      	b.n	8002e9a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d007      	beq.n	8002e9a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e98:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ef4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b40      	cmp	r3, #64	; 0x40
 8002f08:	d10a      	bne.n	8002f20 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff fcba 	bl	8002892 <HAL_I2C_MemRxCpltCallback>
}
 8002f1e:	e01d      	b.n	8002f5c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2212      	movs	r2, #18
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fc6f 	bl	8002812 <HAL_I2C_MasterRxCpltCallback>
}
 8002f34:	e012      	b.n	8002f5c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d117      	bne.n	8002fa8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f90:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f92:	e067      	b.n	8003064 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	611a      	str	r2, [r3, #16]
}
 8002fa6:	e05d      	b.n	8003064 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb0:	d133      	bne.n	800301a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b21      	cmp	r3, #33	; 0x21
 8002fbc:	d109      	bne.n	8002fd2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fce:	611a      	str	r2, [r3, #16]
 8002fd0:	e008      	b.n	8002fe4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <I2C_Master_SB+0x92>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d108      	bne.n	8003008 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d032      	beq.n	8003064 <I2C_Master_SB+0x100>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d02d      	beq.n	8003064 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003016:	605a      	str	r2, [r3, #4]
}
 8003018:	e024      	b.n	8003064 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10e      	bne.n	8003040 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	b29b      	uxth	r3, r3
 8003028:	11db      	asrs	r3, r3, #7
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f003 0306 	and.w	r3, r3, #6
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f063 030f 	orn	r3, r3, #15
 8003036:	b2da      	uxtb	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	611a      	str	r2, [r3, #16]
}
 800303e:	e011      	b.n	8003064 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10d      	bne.n	8003064 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	b29b      	uxth	r3, r3
 800304e:	11db      	asrs	r3, r3, #7
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 0306 	and.w	r3, r3, #6
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f063 030e 	orn	r3, r3, #14
 800305c:	b2da      	uxtb	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	611a      	str	r2, [r3, #16]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	b2da      	uxtb	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	2b00      	cmp	r3, #0
 800308a:	d004      	beq.n	8003096 <I2C_Master_ADD10+0x26>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d108      	bne.n	80030a8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00c      	beq.n	80030b8 <I2C_Master_ADD10+0x48>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030b6:	605a      	str	r2, [r3, #4]
  }
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b091      	sub	sp, #68	; 0x44
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b22      	cmp	r3, #34	; 0x22
 80030ec:	f040 8169 	bne.w	80033c2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10f      	bne.n	8003118 <I2C_Master_ADDR+0x54>
 80030f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d10b      	bne.n	8003118 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003100:	2300      	movs	r3, #0
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	633b      	str	r3, [r7, #48]	; 0x30
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	e160      	b.n	80033da <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311c:	2b00      	cmp	r3, #0
 800311e:	d11d      	bne.n	800315c <I2C_Master_ADDR+0x98>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003128:	d118      	bne.n	800315c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312a:	2300      	movs	r3, #0
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	651a      	str	r2, [r3, #80]	; 0x50
 800315a:	e13e      	b.n	80033da <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d113      	bne.n	800318e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e115      	b.n	80033ba <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 808a 	bne.w	80032ae <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031a0:	d137      	bne.n	8003212 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c0:	d113      	bne.n	80031ea <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d2:	2300      	movs	r3, #0
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	e0e7      	b.n	80033ba <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ea:	2300      	movs	r3, #0
 80031ec:	623b      	str	r3, [r7, #32]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	623b      	str	r3, [r7, #32]
 80031fe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e0d3      	b.n	80033ba <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	2b08      	cmp	r3, #8
 8003216:	d02e      	beq.n	8003276 <I2C_Master_ADDR+0x1b2>
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	2b20      	cmp	r3, #32
 800321c:	d02b      	beq.n	8003276 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003220:	2b12      	cmp	r3, #18
 8003222:	d102      	bne.n	800322a <I2C_Master_ADDR+0x166>
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	2b01      	cmp	r3, #1
 8003228:	d125      	bne.n	8003276 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322c:	2b04      	cmp	r3, #4
 800322e:	d00e      	beq.n	800324e <I2C_Master_ADDR+0x18a>
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	2b02      	cmp	r3, #2
 8003234:	d00b      	beq.n	800324e <I2C_Master_ADDR+0x18a>
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003238:	2b10      	cmp	r3, #16
 800323a:	d008      	beq.n	800324e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e007      	b.n	800325e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800325c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	e0a1      	b.n	80033ba <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003284:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e085      	b.n	80033ba <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d14d      	bne.n	8003354 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d016      	beq.n	80032ec <I2C_Master_ADDR+0x228>
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d013      	beq.n	80032ec <I2C_Master_ADDR+0x228>
 80032c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d010      	beq.n	80032ec <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	e007      	b.n	80032fc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032fa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330a:	d117      	bne.n	800333c <I2C_Master_ADDR+0x278>
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003312:	d00b      	beq.n	800332c <I2C_Master_ADDR+0x268>
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	2b01      	cmp	r3, #1
 8003318:	d008      	beq.n	800332c <I2C_Master_ADDR+0x268>
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	2b08      	cmp	r3, #8
 800331e:	d005      	beq.n	800332c <I2C_Master_ADDR+0x268>
 8003320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003322:	2b10      	cmp	r3, #16
 8003324:	d002      	beq.n	800332c <I2C_Master_ADDR+0x268>
 8003326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003328:	2b20      	cmp	r3, #32
 800332a:	d107      	bne.n	800333c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800333a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	e032      	b.n	80033ba <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003362:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003372:	d117      	bne.n	80033a4 <I2C_Master_ADDR+0x2e0>
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800337a:	d00b      	beq.n	8003394 <I2C_Master_ADDR+0x2d0>
 800337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337e:	2b01      	cmp	r3, #1
 8003380:	d008      	beq.n	8003394 <I2C_Master_ADDR+0x2d0>
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	2b08      	cmp	r3, #8
 8003386:	d005      	beq.n	8003394 <I2C_Master_ADDR+0x2d0>
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	2b10      	cmp	r3, #16
 800338c:	d002      	beq.n	8003394 <I2C_Master_ADDR+0x2d0>
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b20      	cmp	r3, #32
 8003392:	d107      	bne.n	80033a4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033a2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a4:	2300      	movs	r3, #0
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80033c0:	e00b      	b.n	80033da <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
}
 80033d8:	e7ff      	b.n	80033da <I2C_Master_ADDR+0x316>
 80033da:	bf00      	nop
 80033dc:	3744      	adds	r7, #68	; 0x44
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02b      	beq.n	8003458 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d114      	bne.n	8003458 <I2C_SlaveTransmit_TXE+0x72>
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b29      	cmp	r3, #41	; 0x29
 8003432:	d111      	bne.n	8003458 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003442:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2221      	movs	r2, #33	; 0x21
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2228      	movs	r2, #40	; 0x28
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff f9e7 	bl	8002826 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d011      	beq.n	8003496 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02c      	beq.n	8003516 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d114      	bne.n	8003516 <I2C_SlaveReceive_RXNE+0x74>
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b2a      	cmp	r3, #42	; 0x2a
 80034f0:	d111      	bne.n	8003516 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003500:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2222      	movs	r2, #34	; 0x22
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2228      	movs	r2, #40	; 0x28
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff f992 	bl	800283a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d012      	beq.n	8003556 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800357c:	2b28      	cmp	r3, #40	; 0x28
 800357e:	d127      	bne.n	80035d0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	09db      	lsrs	r3, r3, #7
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d103      	bne.n	80035b4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	81bb      	strh	r3, [r7, #12]
 80035b2:	e002      	b.n	80035ba <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80035c2:	89ba      	ldrh	r2, [r7, #12]
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff f940 	bl	800284e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80035ce:	e00e      	b.n	80035ee <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80035ee:	bf00      	nop
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003616:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003644:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003654:	d172      	bne.n	800373c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	2b22      	cmp	r3, #34	; 0x22
 800365a:	d002      	beq.n	8003662 <I2C_Slave_STOPF+0x6a>
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b2a      	cmp	r3, #42	; 0x2a
 8003660:	d135      	bne.n	80036ce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f043 0204 	orr.w	r2, r3, #4
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003694:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd ff1a 	bl	80014d4 <HAL_DMA_GetState>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d049      	beq.n	800373a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	4a69      	ldr	r2, [pc, #420]	; (8003850 <I2C_Slave_STOPF+0x258>)
 80036ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd fd62 	bl	800117c <HAL_DMA_Abort_IT>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d03d      	beq.n	800373a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036c8:	4610      	mov	r0, r2
 80036ca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036cc:	e035      	b.n	800373a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f043 0204 	orr.w	r2, r3, #4
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003700:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fee4 	bl	80014d4 <HAL_DMA_GetState>
 800370c:	4603      	mov	r3, r0
 800370e:	2b01      	cmp	r3, #1
 8003710:	d014      	beq.n	800373c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	4a4e      	ldr	r2, [pc, #312]	; (8003850 <I2C_Slave_STOPF+0x258>)
 8003718:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	4618      	mov	r0, r3
 8003720:	f7fd fd2c 	bl	800117c <HAL_DMA_Abort_IT>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003734:	4610      	mov	r0, r2
 8003736:	4798      	blx	r3
 8003738:	e000      	b.n	800373c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800373a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d03e      	beq.n	80037c4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d112      	bne.n	800377a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d112      	bne.n	80037ae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f043 0204 	orr.w	r2, r3, #4
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f843 	bl	8003858 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80037d2:	e039      	b.n	8003848 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b2a      	cmp	r3, #42	; 0x2a
 80037d8:	d109      	bne.n	80037ee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2228      	movs	r2, #40	; 0x28
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff f826 	bl	800283a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b28      	cmp	r3, #40	; 0x28
 80037f8:	d111      	bne.n	800381e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a15      	ldr	r2, [pc, #84]	; (8003854 <I2C_Slave_STOPF+0x25c>)
 80037fe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff f827 	bl	800286a <HAL_I2C_ListenCpltCallback>
}
 800381c:	e014      	b.n	8003848 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	2b22      	cmp	r3, #34	; 0x22
 8003824:	d002      	beq.n	800382c <I2C_Slave_STOPF+0x234>
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	2b22      	cmp	r3, #34	; 0x22
 800382a:	d10d      	bne.n	8003848 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe fff9 	bl	800283a <HAL_I2C_SlaveRxCpltCallback>
}
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	08003fdd 	.word	0x08003fdd
 8003854:	ffff0000 	.word	0xffff0000

08003858 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003866:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800386e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003870:	7bbb      	ldrb	r3, [r7, #14]
 8003872:	2b10      	cmp	r3, #16
 8003874:	d002      	beq.n	800387c <I2C_ITError+0x24>
 8003876:	7bbb      	ldrb	r3, [r7, #14]
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d10a      	bne.n	8003892 <I2C_ITError+0x3a>
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b22      	cmp	r3, #34	; 0x22
 8003880:	d107      	bne.n	8003892 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003890:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003898:	2b28      	cmp	r3, #40	; 0x28
 800389a:	d107      	bne.n	80038ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2228      	movs	r2, #40	; 0x28
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038aa:	e015      	b.n	80038d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ba:	d00a      	beq.n	80038d2 <I2C_ITError+0x7a>
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	2b60      	cmp	r3, #96	; 0x60
 80038c0:	d007      	beq.n	80038d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e6:	d162      	bne.n	80039ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d020      	beq.n	8003948 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	4a6a      	ldr	r2, [pc, #424]	; (8003ab4 <I2C_ITError+0x25c>)
 800390c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fc32 	bl	800117c <HAL_DMA_Abort_IT>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8089 	beq.w	8003a32 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003942:	4610      	mov	r0, r2
 8003944:	4798      	blx	r3
 8003946:	e074      	b.n	8003a32 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	4a59      	ldr	r2, [pc, #356]	; (8003ab4 <I2C_ITError+0x25c>)
 800394e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	4618      	mov	r0, r3
 8003956:	f7fd fc11 	bl	800117c <HAL_DMA_Abort_IT>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d068      	beq.n	8003a32 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d10b      	bne.n	8003986 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039a8:	4610      	mov	r0, r2
 80039aa:	4798      	blx	r3
 80039ac:	e041      	b.n	8003a32 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b60      	cmp	r3, #96	; 0x60
 80039b8:	d125      	bne.n	8003a06 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d10b      	bne.n	80039ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fe ff5b 	bl	80028ba <HAL_I2C_AbortCpltCallback>
 8003a04:	e015      	b.n	8003a32 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d10b      	bne.n	8003a2c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7fe ff3a 	bl	80028a6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10e      	bne.n	8003a60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d109      	bne.n	8003a60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d104      	bne.n	8003a60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a6e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a76:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d113      	bne.n	8003aac <I2C_ITError+0x254>
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b28      	cmp	r3, #40	; 0x28
 8003a88:	d110      	bne.n	8003aac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <I2C_ITError+0x260>)
 8003a8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fe fedf 	bl	800286a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003aac:	bf00      	nop
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	08003fdd 	.word	0x08003fdd
 8003ab8:	ffff0000 	.word	0xffff0000

08003abc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	817b      	strh	r3, [r7, #10]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	813b      	strh	r3, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fb1a 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00d      	beq.n	8003b1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0c:	d103      	bne.n	8003b16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e05f      	b.n	8003bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b1a:	897b      	ldrh	r3, [r7, #10]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	6a3a      	ldr	r2, [r7, #32]
 8003b2e:	492d      	ldr	r1, [pc, #180]	; (8003be4 <I2C_RequestMemoryWrite+0x128>)
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fb52 	bl	80041da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e04c      	b.n	8003bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b58:	6a39      	ldr	r1, [r7, #32]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fbbc 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00d      	beq.n	8003b82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d107      	bne.n	8003b7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e02b      	b.n	8003bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d105      	bne.n	8003b94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b88:	893b      	ldrh	r3, [r7, #8]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	611a      	str	r2, [r3, #16]
 8003b92:	e021      	b.n	8003bd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b94:	893b      	ldrh	r3, [r7, #8]
 8003b96:	0a1b      	lsrs	r3, r3, #8
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	6a39      	ldr	r1, [r7, #32]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fb96 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00d      	beq.n	8003bce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d107      	bne.n	8003bca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e005      	b.n	8003bda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bce:	893b      	ldrh	r3, [r7, #8]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	00010002 	.word	0x00010002

08003be8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	817b      	strh	r3, [r7, #10]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	813b      	strh	r3, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fa7c 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c48:	d103      	bne.n	8003c52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0aa      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c56:	897b      	ldrh	r3, [r7, #10]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	6a3a      	ldr	r2, [r7, #32]
 8003c6a:	4952      	ldr	r1, [pc, #328]	; (8003db4 <I2C_RequestMemoryRead+0x1cc>)
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fab4 	bl	80041da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e097      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c94:	6a39      	ldr	r1, [r7, #32]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fb1e 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d107      	bne.n	8003cba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e076      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc4:	893b      	ldrh	r3, [r7, #8]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	611a      	str	r2, [r3, #16]
 8003cce:	e021      	b.n	8003d14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce0:	6a39      	ldr	r1, [r7, #32]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 faf8 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d107      	bne.n	8003d06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e050      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d0a:	893b      	ldrh	r3, [r7, #8]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	6a39      	ldr	r1, [r7, #32]
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 fadd 	bl	80042d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00d      	beq.n	8003d40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d107      	bne.n	8003d3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e035      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f9e5 	bl	800412c <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00d      	beq.n	8003d84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d103      	bne.n	8003d80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e013      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d84:	897b      	ldrh	r3, [r7, #10]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	6a3a      	ldr	r2, [r7, #32]
 8003d98:	4906      	ldr	r1, [pc, #24]	; (8003db4 <I2C_RequestMemoryRead+0x1cc>)
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fa1d 	bl	80041da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	00010002 	.word	0x00010002

08003db8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dcc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003dea:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	2200      	movs	r2, #0
 8003dfa:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	2200      	movs	r2, #0
 8003e0a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003e12:	2b21      	cmp	r3, #33	; 0x21
 8003e14:	d007      	beq.n	8003e26 <I2C_DMAXferCplt+0x6e>
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
 8003e18:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8003e1c:	2b22      	cmp	r3, #34	; 0x22
 8003e1e:	d131      	bne.n	8003e84 <I2C_DMAXferCplt+0xcc>
 8003e20:	7cbb      	ldrb	r3, [r7, #18]
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d12e      	bne.n	8003e84 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e34:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	2b29      	cmp	r3, #41	; 0x29
 8003e40:	d10a      	bne.n	8003e58 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2221      	movs	r2, #33	; 0x21
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2228      	movs	r2, #40	; 0x28
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e50:	6978      	ldr	r0, [r7, #20]
 8003e52:	f7fe fce8 	bl	8002826 <HAL_I2C_SlaveTxCpltCallback>
 8003e56:	e00c      	b.n	8003e72 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e5c:	d109      	bne.n	8003e72 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2222      	movs	r2, #34	; 0x22
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2228      	movs	r2, #40	; 0x28
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e6c:	6978      	ldr	r0, [r7, #20]
 8003e6e:	f7fe fce4 	bl	800283a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e80:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e82:	e06a      	b.n	8003f5a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d064      	beq.n	8003f5a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d107      	bne.n	8003eaa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003eb8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ec0:	d009      	beq.n	8003ed6 <I2C_DMAXferCplt+0x11e>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d006      	beq.n	8003ed6 <I2C_DMAXferCplt+0x11e>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003ece:	d002      	beq.n	8003ed6 <I2C_DMAXferCplt+0x11e>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d107      	bne.n	8003ee6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ef4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f04:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003f14:	6978      	ldr	r0, [r7, #20]
 8003f16:	f7fe fcc6 	bl	80028a6 <HAL_I2C_ErrorCallback>
}
 8003f1a:	e01e      	b.n	8003f5a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d10a      	bne.n	8003f46 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003f3e:	6978      	ldr	r0, [r7, #20]
 8003f40:	f7fe fca7 	bl	8002892 <HAL_I2C_MemRxCpltCallback>
}
 8003f44:	e009      	b.n	8003f5a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2212      	movs	r2, #18
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f54:	6978      	ldr	r0, [r7, #20]
 8003f56:	f7fe fc5c 	bl	8002812 <HAL_I2C_MasterRxCpltCallback>
}
 8003f5a:	bf00      	nop
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7fd faad 	bl	80014f0 <HAL_DMA_GetError>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d01b      	beq.n	8003fd4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003faa:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f043 0210 	orr.w	r2, r3, #16
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f7fe fc69 	bl	80028a6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ff6:	4b4b      	ldr	r3, [pc, #300]	; (8004124 <I2C_DMAAbort+0x148>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	08db      	lsrs	r3, r3, #3
 8003ffc:	4a4a      	ldr	r2, [pc, #296]	; (8004128 <I2C_DMAAbort+0x14c>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	0a1a      	lsrs	r2, r3, #8
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	00da      	lsls	r2, r3, #3
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004022:	e00a      	b.n	800403a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3b01      	subs	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004038:	d0ea      	beq.n	8004010 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	2200      	movs	r2, #0
 8004048:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	2200      	movs	r2, #0
 8004058:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004068:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2200      	movs	r2, #0
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407c:	2200      	movs	r2, #0
 800407e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	2200      	movs	r2, #0
 800408e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b60      	cmp	r3, #96	; 0x60
 80040aa:	d10e      	bne.n	80040ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2200      	movs	r2, #0
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040c2:	6978      	ldr	r0, [r7, #20]
 80040c4:	f7fe fbf9 	bl	80028ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040c8:	e027      	b.n	800411a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040d0:	2b28      	cmp	r3, #40	; 0x28
 80040d2:	d117      	bne.n	8004104 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2200      	movs	r2, #0
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2228      	movs	r2, #40	; 0x28
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004102:	e007      	b.n	8004114 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004114:	6978      	ldr	r0, [r7, #20]
 8004116:	f7fe fbc6 	bl	80028a6 <HAL_I2C_ErrorCallback>
}
 800411a:	bf00      	nop
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20000000 	.word	0x20000000
 8004128:	14f8b589 	.word	0x14f8b589

0800412c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800413c:	e025      	b.n	800418a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d021      	beq.n	800418a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7fc fd41 	bl	8000bcc <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d116      	bne.n	800418a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e023      	b.n	80041d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d10d      	bne.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	43da      	mvns	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4013      	ands	r3, r2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2300      	movne	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	e00c      	b.n	80041ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	43da      	mvns	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bf0c      	ite	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	2300      	movne	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d0b6      	beq.n	800413e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041e8:	e051      	b.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f8:	d123      	bne.n	8004242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004208:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004212:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f043 0204 	orr.w	r2, r3, #4
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e046      	b.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d021      	beq.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7fc fcbf 	bl	8000bcc <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d116      	bne.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f043 0220 	orr.w	r2, r3, #32
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e020      	b.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10c      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	43da      	mvns	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2300      	moveq	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	e00b      	b.n	80042ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	43da      	mvns	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d18d      	bne.n	80041ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e4:	e02d      	b.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f86a 	bl	80043c0 <I2C_IsAcknowledgeFailed>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e02d      	b.n	8004352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d021      	beq.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fc fc65 	bl	8000bcc <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d116      	bne.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f043 0220 	orr.w	r2, r3, #32
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e007      	b.n	8004352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434c:	2b80      	cmp	r3, #128	; 0x80
 800434e:	d1ca      	bne.n	80042e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004368:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	08db      	lsrs	r3, r3, #3
 800436e:	4a13      	ldr	r2, [pc, #76]	; (80043bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	0a1a      	lsrs	r2, r3, #8
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3b01      	subs	r3, #1
 8004382:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d107      	bne.n	800439a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f043 0220 	orr.w	r2, r3, #32
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e008      	b.n	80043ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a8:	d0e9      	beq.n	800437e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	20000000 	.word	0x20000000
 80043bc:	14f8b589 	.word	0x14f8b589

080043c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d6:	d11b      	bne.n	8004410 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f043 0204 	orr.w	r2, r3, #4
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800442e:	d103      	bne.n	8004438 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004436:	e007      	b.n	8004448 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004440:	d102      	bne.n	8004448 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2208      	movs	r2, #8
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e267      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d075      	beq.n	800455e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004472:	4b88      	ldr	r3, [pc, #544]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	2b04      	cmp	r3, #4
 800447c:	d00c      	beq.n	8004498 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800447e:	4b85      	ldr	r3, [pc, #532]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004486:	2b08      	cmp	r3, #8
 8004488:	d112      	bne.n	80044b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800448a:	4b82      	ldr	r3, [pc, #520]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004496:	d10b      	bne.n	80044b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004498:	4b7e      	ldr	r3, [pc, #504]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d05b      	beq.n	800455c <HAL_RCC_OscConfig+0x108>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d157      	bne.n	800455c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e242      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d106      	bne.n	80044c8 <HAL_RCC_OscConfig+0x74>
 80044ba:	4b76      	ldr	r3, [pc, #472]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a75      	ldr	r2, [pc, #468]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80044c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	e01d      	b.n	8004504 <HAL_RCC_OscConfig+0xb0>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0x98>
 80044d2:	4b70      	ldr	r3, [pc, #448]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a6f      	ldr	r2, [pc, #444]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80044d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	4b6d      	ldr	r3, [pc, #436]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a6c      	ldr	r2, [pc, #432]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80044e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	e00b      	b.n	8004504 <HAL_RCC_OscConfig+0xb0>
 80044ec:	4b69      	ldr	r3, [pc, #420]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a68      	ldr	r2, [pc, #416]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80044f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	4b66      	ldr	r3, [pc, #408]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a65      	ldr	r2, [pc, #404]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80044fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d013      	beq.n	8004534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fc fb5e 	bl	8000bcc <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004514:	f7fc fb5a 	bl	8000bcc <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e207      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004526:	4b5b      	ldr	r3, [pc, #364]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0xc0>
 8004532:	e014      	b.n	800455e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7fc fb4a 	bl	8000bcc <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800453c:	f7fc fb46 	bl	8000bcc <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e1f3      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454e:	4b51      	ldr	r3, [pc, #324]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0xe8>
 800455a:	e000      	b.n	800455e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d063      	beq.n	8004632 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800456a:	4b4a      	ldr	r3, [pc, #296]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004576:	4b47      	ldr	r3, [pc, #284]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800457e:	2b08      	cmp	r3, #8
 8004580:	d11c      	bne.n	80045bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004582:	4b44      	ldr	r3, [pc, #272]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d116      	bne.n	80045bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458e:	4b41      	ldr	r3, [pc, #260]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_RCC_OscConfig+0x152>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d001      	beq.n	80045a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e1c7      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a6:	4b3b      	ldr	r3, [pc, #236]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	4937      	ldr	r1, [pc, #220]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ba:	e03a      	b.n	8004632 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d020      	beq.n	8004606 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c4:	4b34      	ldr	r3, [pc, #208]	; (8004698 <HAL_RCC_OscConfig+0x244>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ca:	f7fc faff 	bl	8000bcc <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d2:	f7fc fafb 	bl	8000bcc <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e1a8      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e4:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f0:	4b28      	ldr	r3, [pc, #160]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4925      	ldr	r1, [pc, #148]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]
 8004604:	e015      	b.n	8004632 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004606:	4b24      	ldr	r3, [pc, #144]	; (8004698 <HAL_RCC_OscConfig+0x244>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fc fade 	bl	8000bcc <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004614:	f7fc fada 	bl	8000bcc <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e187      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004626:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d036      	beq.n	80046ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004646:	4b15      	ldr	r3, [pc, #84]	; (800469c <HAL_RCC_OscConfig+0x248>)
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fc fabe 	bl	8000bcc <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004654:	f7fc faba 	bl	8000bcc <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e167      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <HAL_RCC_OscConfig+0x240>)
 8004668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x200>
 8004672:	e01b      	b.n	80046ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_RCC_OscConfig+0x248>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467a:	f7fc faa7 	bl	8000bcc <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004680:	e00e      	b.n	80046a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004682:	f7fc faa3 	bl	8000bcc <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d907      	bls.n	80046a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e150      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
 8004694:	40023800 	.word	0x40023800
 8004698:	42470000 	.word	0x42470000
 800469c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a0:	4b88      	ldr	r3, [pc, #544]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 80046a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1ea      	bne.n	8004682 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8097 	beq.w	80047e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ba:	2300      	movs	r3, #0
 80046bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046be:	4b81      	ldr	r3, [pc, #516]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10f      	bne.n	80046ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ca:	2300      	movs	r3, #0
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	4b7d      	ldr	r3, [pc, #500]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	4a7c      	ldr	r2, [pc, #496]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 80046d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d8:	6413      	str	r3, [r2, #64]	; 0x40
 80046da:	4b7a      	ldr	r3, [pc, #488]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e6:	2301      	movs	r3, #1
 80046e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ea:	4b77      	ldr	r3, [pc, #476]	; (80048c8 <HAL_RCC_OscConfig+0x474>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d118      	bne.n	8004728 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046f6:	4b74      	ldr	r3, [pc, #464]	; (80048c8 <HAL_RCC_OscConfig+0x474>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a73      	ldr	r2, [pc, #460]	; (80048c8 <HAL_RCC_OscConfig+0x474>)
 80046fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004702:	f7fc fa63 	bl	8000bcc <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470a:	f7fc fa5f 	bl	8000bcc <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e10c      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471c:	4b6a      	ldr	r3, [pc, #424]	; (80048c8 <HAL_RCC_OscConfig+0x474>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d106      	bne.n	800473e <HAL_RCC_OscConfig+0x2ea>
 8004730:	4b64      	ldr	r3, [pc, #400]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4a63      	ldr	r2, [pc, #396]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6713      	str	r3, [r2, #112]	; 0x70
 800473c:	e01c      	b.n	8004778 <HAL_RCC_OscConfig+0x324>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b05      	cmp	r3, #5
 8004744:	d10c      	bne.n	8004760 <HAL_RCC_OscConfig+0x30c>
 8004746:	4b5f      	ldr	r3, [pc, #380]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 8004748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474a:	4a5e      	ldr	r2, [pc, #376]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 800474c:	f043 0304 	orr.w	r3, r3, #4
 8004750:	6713      	str	r3, [r2, #112]	; 0x70
 8004752:	4b5c      	ldr	r3, [pc, #368]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	4a5b      	ldr	r2, [pc, #364]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	6713      	str	r3, [r2, #112]	; 0x70
 800475e:	e00b      	b.n	8004778 <HAL_RCC_OscConfig+0x324>
 8004760:	4b58      	ldr	r3, [pc, #352]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	4a57      	ldr	r2, [pc, #348]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 8004766:	f023 0301 	bic.w	r3, r3, #1
 800476a:	6713      	str	r3, [r2, #112]	; 0x70
 800476c:	4b55      	ldr	r3, [pc, #340]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	4a54      	ldr	r2, [pc, #336]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 8004772:	f023 0304 	bic.w	r3, r3, #4
 8004776:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d015      	beq.n	80047ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004780:	f7fc fa24 	bl	8000bcc <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004786:	e00a      	b.n	800479e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004788:	f7fc fa20 	bl	8000bcc <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	; 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e0cb      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479e:	4b49      	ldr	r3, [pc, #292]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0ee      	beq.n	8004788 <HAL_RCC_OscConfig+0x334>
 80047aa:	e014      	b.n	80047d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ac:	f7fc fa0e 	bl	8000bcc <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fc fa0a 	bl	8000bcc <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e0b5      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ca:	4b3e      	ldr	r3, [pc, #248]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1ee      	bne.n	80047b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d105      	bne.n	80047e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047dc:	4b39      	ldr	r3, [pc, #228]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	4a38      	ldr	r2, [pc, #224]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 80047e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80a1 	beq.w	8004934 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047f2:	4b34      	ldr	r3, [pc, #208]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d05c      	beq.n	80048b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d141      	bne.n	800488a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004806:	4b31      	ldr	r3, [pc, #196]	; (80048cc <HAL_RCC_OscConfig+0x478>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fc f9de 	bl	8000bcc <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004814:	f7fc f9da 	bl	8000bcc <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e087      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004826:	4b27      	ldr	r3, [pc, #156]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69da      	ldr	r2, [r3, #28]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	019b      	lsls	r3, r3, #6
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	3b01      	subs	r3, #1
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	491b      	ldr	r1, [pc, #108]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <HAL_RCC_OscConfig+0x478>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004862:	f7fc f9b3 	bl	8000bcc <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800486a:	f7fc f9af 	bl	8000bcc <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e05c      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487c:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x416>
 8004888:	e054      	b.n	8004934 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <HAL_RCC_OscConfig+0x478>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fc f99c 	bl	8000bcc <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004898:	f7fc f998 	bl	8000bcc <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e045      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_RCC_OscConfig+0x470>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x444>
 80048b6:	e03d      	b.n	8004934 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d107      	bne.n	80048d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e038      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
 80048c4:	40023800 	.word	0x40023800
 80048c8:	40007000 	.word	0x40007000
 80048cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048d0:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <HAL_RCC_OscConfig+0x4ec>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d028      	beq.n	8004930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d121      	bne.n	8004930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d11a      	bne.n	8004930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004900:	4013      	ands	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004908:	4293      	cmp	r3, r2
 800490a:	d111      	bne.n	8004930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	3b01      	subs	r3, #1
 800491a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d107      	bne.n	8004930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d001      	beq.n	8004934 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40023800 	.word	0x40023800

08004944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0cc      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004958:	4b68      	ldr	r3, [pc, #416]	; (8004afc <HAL_RCC_ClockConfig+0x1b8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d90c      	bls.n	8004980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4b65      	ldr	r3, [pc, #404]	; (8004afc <HAL_RCC_ClockConfig+0x1b8>)
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496e:	4b63      	ldr	r3, [pc, #396]	; (8004afc <HAL_RCC_ClockConfig+0x1b8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d001      	beq.n	8004980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0b8      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004998:	4b59      	ldr	r3, [pc, #356]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4a58      	ldr	r2, [pc, #352]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049b0:	4b53      	ldr	r3, [pc, #332]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4a52      	ldr	r2, [pc, #328]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049bc:	4b50      	ldr	r3, [pc, #320]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	494d      	ldr	r1, [pc, #308]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d044      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d107      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e2:	4b47      	ldr	r3, [pc, #284]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d119      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e07f      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d003      	beq.n	8004a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d107      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a02:	4b3f      	ldr	r3, [pc, #252]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e06f      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a12:	4b3b      	ldr	r3, [pc, #236]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e067      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a22:	4b37      	ldr	r3, [pc, #220]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f023 0203 	bic.w	r2, r3, #3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4934      	ldr	r1, [pc, #208]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a34:	f7fc f8ca 	bl	8000bcc <HAL_GetTick>
 8004a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a3c:	f7fc f8c6 	bl	8000bcc <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e04f      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a52:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 020c 	and.w	r2, r3, #12
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d1eb      	bne.n	8004a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a64:	4b25      	ldr	r3, [pc, #148]	; (8004afc <HAL_RCC_ClockConfig+0x1b8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d20c      	bcs.n	8004a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a72:	4b22      	ldr	r3, [pc, #136]	; (8004afc <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7a:	4b20      	ldr	r3, [pc, #128]	; (8004afc <HAL_RCC_ClockConfig+0x1b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d001      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e032      	b.n	8004af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a98:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4916      	ldr	r1, [pc, #88]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ab6:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	490e      	ldr	r1, [pc, #56]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aca:	f000 f821 	bl	8004b10 <HAL_RCC_GetSysClockFreq>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	490a      	ldr	r1, [pc, #40]	; (8004b04 <HAL_RCC_ClockConfig+0x1c0>)
 8004adc:	5ccb      	ldrb	r3, [r1, r3]
 8004ade:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae2:	4a09      	ldr	r2, [pc, #36]	; (8004b08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_RCC_ClockConfig+0x1c8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fc f82a 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40023c00 	.word	0x40023c00
 8004b00:	40023800 	.word	0x40023800
 8004b04:	080052c0 	.word	0x080052c0
 8004b08:	20000000 	.word	0x20000000
 8004b0c:	20000004 	.word	0x20000004

08004b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b14:	b090      	sub	sp, #64	; 0x40
 8004b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b20:	2300      	movs	r3, #0
 8004b22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b28:	4b59      	ldr	r3, [pc, #356]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 030c 	and.w	r3, r3, #12
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d00d      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0x40>
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	f200 80a1 	bhi.w	8004c7c <HAL_RCC_GetSysClockFreq+0x16c>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0x34>
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d003      	beq.n	8004b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b42:	e09b      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b44:	4b53      	ldr	r3, [pc, #332]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004b48:	e09b      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b4a:	4b53      	ldr	r3, [pc, #332]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b4e:	e098      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b50:	4b4f      	ldr	r3, [pc, #316]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b5a:	4b4d      	ldr	r3, [pc, #308]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d028      	beq.n	8004bb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b66:	4b4a      	ldr	r3, [pc, #296]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	099b      	lsrs	r3, r3, #6
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	623b      	str	r3, [r7, #32]
 8004b70:	627a      	str	r2, [r7, #36]	; 0x24
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4b47      	ldr	r3, [pc, #284]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b7c:	fb03 f201 	mul.w	r2, r3, r1
 8004b80:	2300      	movs	r3, #0
 8004b82:	fb00 f303 	mul.w	r3, r0, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	4a43      	ldr	r2, [pc, #268]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b8a:	fba0 1202 	umull	r1, r2, r0, r2
 8004b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b90:	460a      	mov	r2, r1
 8004b92:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b96:	4413      	add	r3, r2
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	61fa      	str	r2, [r7, #28]
 8004ba2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004baa:	f7fb fb15 	bl	80001d8 <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb6:	e053      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb8:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	099b      	lsrs	r3, r3, #6
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	617a      	str	r2, [r7, #20]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004bca:	f04f 0b00 	mov.w	fp, #0
 8004bce:	4652      	mov	r2, sl
 8004bd0:	465b      	mov	r3, fp
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f04f 0100 	mov.w	r1, #0
 8004bda:	0159      	lsls	r1, r3, #5
 8004bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be0:	0150      	lsls	r0, r2, #5
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	ebb2 080a 	subs.w	r8, r2, sl
 8004bea:	eb63 090b 	sbc.w	r9, r3, fp
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c02:	ebb2 0408 	subs.w	r4, r2, r8
 8004c06:	eb63 0509 	sbc.w	r5, r3, r9
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	00eb      	lsls	r3, r5, #3
 8004c14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c18:	00e2      	lsls	r2, r4, #3
 8004c1a:	4614      	mov	r4, r2
 8004c1c:	461d      	mov	r5, r3
 8004c1e:	eb14 030a 	adds.w	r3, r4, sl
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	eb45 030b 	adc.w	r3, r5, fp
 8004c28:	607b      	str	r3, [r7, #4]
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c36:	4629      	mov	r1, r5
 8004c38:	028b      	lsls	r3, r1, #10
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c40:	4621      	mov	r1, r4
 8004c42:	028a      	lsls	r2, r1, #10
 8004c44:	4610      	mov	r0, r2
 8004c46:	4619      	mov	r1, r3
 8004c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	60fa      	str	r2, [r7, #12]
 8004c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c54:	f7fb fac0 	bl	80001d8 <__aeabi_uldivmod>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c7a:	e002      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3740      	adds	r7, #64	; 0x40
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8e:	bf00      	nop
 8004c90:	40023800 	.word	0x40023800
 8004c94:	00f42400 	.word	0x00f42400
 8004c98:	017d7840 	.word	0x017d7840

08004c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000000 	.word	0x20000000

08004cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cb8:	f7ff fff0 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0a9b      	lsrs	r3, r3, #10
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4903      	ldr	r1, [pc, #12]	; (8004cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	080052d0 	.word	0x080052d0

08004cdc <i2c_hw_reset>:
/*
  * @brief  IIC
  * @param  None
  * @retval None
 */
static void i2c_hw_reset(void) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004ce2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004ce6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004ce8:	2311      	movs	r3, #17
 8004cea:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cec:	2302      	movs	r3, #2
 8004cee:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf0:	1d3b      	adds	r3, r7, #4
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	481a      	ldr	r0, [pc, #104]	; (8004d60 <i2c_hw_reset+0x84>)
 8004cf6:	f7fc fce7 	bl	80016c8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004d00:	4817      	ldr	r0, [pc, #92]	; (8004d60 <i2c_hw_reset+0x84>)
 8004d02:	f7fc ff61 	bl	8001bc8 <HAL_GPIO_WritePin>

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET ||
 8004d06:	2180      	movs	r1, #128	; 0x80
 8004d08:	4815      	ldr	r0, [pc, #84]	; (8004d60 <i2c_hw_reset+0x84>)
 8004d0a:	f7fc ff45 	bl	8001b98 <HAL_GPIO_ReadPin>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d004      	beq.n	8004d1e <i2c_hw_reset+0x42>
        HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_RESET) {
 8004d14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d18:	4811      	ldr	r0, [pc, #68]	; (8004d60 <i2c_hw_reset+0x84>)
 8004d1a:	f7fc ff3d 	bl	8001b98 <HAL_GPIO_ReadPin>

    }

    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d1e:	2312      	movs	r3, #18
 8004d20:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d22:	1d3b      	adds	r3, r7, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	480e      	ldr	r0, [pc, #56]	; (8004d60 <i2c_hw_reset+0x84>)
 8004d28:	f7fc fcce 	bl	80016c8 <HAL_GPIO_Init>
    hi2c1.Instance->CR1 |= I2C_CR1_SWRST;
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <i2c_hw_reset+0x88>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <i2c_hw_reset+0x88>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d3a:	601a      	str	r2, [r3, #0]
    hi2c1.Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <i2c_hw_reset+0x88>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <i2c_hw_reset+0x88>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d4a:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8004d4c:	4805      	ldr	r0, [pc, #20]	; (8004d64 <i2c_hw_reset+0x88>)
 8004d4e:	f7fd f8bd 	bl	8001ecc <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 8004d52:	4804      	ldr	r0, [pc, #16]	; (8004d64 <i2c_hw_reset+0x88>)
 8004d54:	f7fc ff76 	bl	8001c44 <HAL_I2C_Init>
}
 8004d58:	bf00      	nop
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40020400 	.word	0x40020400
 8004d64:	20000028 	.word	0x20000028

08004d68 <GT911_init>:
  * @brief  GT911 Init
  * @param  None
  * @retval None
 */
void GT911_init()
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
	Dev_Now.GT911_RST=0;
 8004d6e:	4b22      	ldr	r3, [pc, #136]	; (8004df8 <GT911_init+0x90>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = GT911_RST_PIN | GT911_INT_PIN;
 8004d74:	f44f 7304 	mov.w	r3, #528	; 0x210
 8004d78:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004d82:	2303      	movs	r3, #3
 8004d84:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GT911_RST_PORT, &GPIO_InitStruct);
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	4619      	mov	r1, r3
 8004d8a:	481c      	ldr	r0, [pc, #112]	; (8004dfc <GT911_init+0x94>)
 8004d8c:	f7fc fc9c 	bl	80016c8 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GT911_RST_PORT,GT911_RST_PIN,GPIO_PIN_RESET);    
 8004d90:	2200      	movs	r2, #0
 8004d92:	2110      	movs	r1, #16
 8004d94:	4819      	ldr	r0, [pc, #100]	; (8004dfc <GT911_init+0x94>)
 8004d96:	f7fc ff17 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8004d9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d9e:	f7fb ff21 	bl	8000be4 <HAL_Delay>
	HAL_GPIO_WritePin(GT911_INT_PORT,GT911_INT_PIN,GPIO_PIN_RESET);    
 8004da2:	2200      	movs	r2, #0
 8004da4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004da8:	4814      	ldr	r0, [pc, #80]	; (8004dfc <GT911_init+0x94>)
 8004daa:	f7fc ff0d 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8004dae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004db2:	f7fb ff17 	bl	8000be4 <HAL_Delay>
	HAL_GPIO_WritePin(GT911_RST_PORT,GT911_RST_PIN,GPIO_PIN_SET);    
 8004db6:	2201      	movs	r2, #1
 8004db8:	2110      	movs	r1, #16
 8004dba:	4810      	ldr	r0, [pc, #64]	; (8004dfc <GT911_init+0x94>)
 8004dbc:	f7fc ff04 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8004dc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004dc4:	f7fb ff0e 	bl	8000be4 <HAL_Delay>
	
	GPIO_InitStruct.Pin = GT911_INT_PIN;
 8004dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dcc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004dce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004dd2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GT911_INT_PORT, &GPIO_InitStruct);
 8004dd8:	1d3b      	adds	r3, r7, #4
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4807      	ldr	r0, [pc, #28]	; (8004dfc <GT911_init+0x94>)
 8004dde:	f7fc fc73 	bl	80016c8 <HAL_GPIO_Init>
	
	HAL_Delay(100);
 8004de2:	2064      	movs	r0, #100	; 0x64
 8004de4:	f7fb fefe 	bl	8000be4 <HAL_Delay>
	Dev_Now.GT911_RST=1;
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <GT911_init+0x90>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	2000019c 	.word	0x2000019c
 8004dfc:	40020400 	.word	0x40020400

08004e00 <IICReset>:
  * @brief  IIC Reset
  * @param  None
  * @retval None
 */
void IICReset(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
	SET_BIT(hi2c1.Instance->CR1, I2C_CR1_STOP);
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <IICReset+0x38>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <IICReset+0x38>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e12:	601a      	str	r2, [r3, #0]
	hi2c1.State = HAL_I2C_STATE_READY;
 8004e14:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <IICReset+0x38>)
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	hi2c1.Mode = HAL_I2C_MODE_NONE;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <IICReset+0x38>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	i2c_hw_reset();
 8004e24:	f7ff ff5a 	bl	8004cdc <i2c_hw_reset>
	IICError ++;
 8004e28:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <IICReset+0x3c>)
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	4b02      	ldr	r3, [pc, #8]	; (8004e3c <IICReset+0x3c>)
 8004e32:	801a      	strh	r2, [r3, #0]
}
 8004e34:	bf00      	nop
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000028 	.word	0x20000028
 8004e3c:	2000019a 	.word	0x2000019a

08004e40 <GT911_Scan>:

#define regNum	41
void GT911_Scan(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af02      	add	r7, sp, #8
	uint8_t Clearbuf = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	71fb      	strb	r3, [r7, #7]

	if (Dev_Now.Touch == 1)
 8004e4e:	4b35      	ldr	r3, [pc, #212]	; (8004f24 <GT911_Scan+0xe4>)
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d12b      	bne.n	8004eae <GT911_Scan+0x6e>
	{
		Dev_Now.Touch = 0;
 8004e56:	4b33      	ldr	r3, [pc, #204]	; (8004f24 <GT911_Scan+0xe4>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	705a      	strb	r2, [r3, #1]
		if(GTDMASendOK_F)
 8004e5c:	4b32      	ldr	r3, [pc, #200]	; (8004f28 <GT911_Scan+0xe8>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d013      	beq.n	8004e8c <GT911_Scan+0x4c>
		{
			GTDMASendOK_F = 0;
 8004e64:	4b30      	ldr	r3, [pc, #192]	; (8004f28 <GT911_Scan+0xe8>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_Mem_Read_DMA(&hi2c1, CT_CMD_WR, GT911_READ_XY_REG, I2C_MEMADD_SIZE_16BIT, DMAbuf, regNum))
 8004e6a:	2329      	movs	r3, #41	; 0x29
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	4b2f      	ldr	r3, [pc, #188]	; (8004f2c <GT911_Scan+0xec>)
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	2310      	movs	r3, #16
 8004e74:	f248 124e 	movw	r2, #33102	; 0x814e
 8004e78:	21ba      	movs	r1, #186	; 0xba
 8004e7a:	482d      	ldr	r0, [pc, #180]	; (8004f30 <GT911_Scan+0xf0>)
 8004e7c:	f7fd f9ba 	bl	80021f4 <HAL_I2C_Mem_Read_DMA>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d013      	beq.n	8004eae <GT911_Scan+0x6e>
			{
				IICReset();
 8004e86:	f7ff ffbb 	bl	8004e00 <IICReset>
				return;
 8004e8a:	e1da      	b.n	8005242 <GT911_Scan+0x402>
			}
		}
		else
		{
			if(HAL_I2C_Mem_Write_DMA(&hi2c1, CT_CMD_WR, GT911_READ_XY_REG, I2C_MEMADD_SIZE_16BIT, &Clearbuf, 1))
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	1dbb      	adds	r3, r7, #6
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	2310      	movs	r3, #16
 8004e96:	f248 124e 	movw	r2, #33102	; 0x814e
 8004e9a:	21ba      	movs	r1, #186	; 0xba
 8004e9c:	4824      	ldr	r0, [pc, #144]	; (8004f30 <GT911_Scan+0xf0>)
 8004e9e:	f7fd f845 	bl	8001f2c <HAL_I2C_Mem_Write_DMA>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <GT911_Scan+0x6e>
			{
				IICReset();
 8004ea8:	f7ff ffaa 	bl	8004e00 <IICReset>
				return;
 8004eac:	e1c9      	b.n	8005242 <GT911_Scan+0x402>
			}
		}
	}

	if(GTDMAReadOK_F)
 8004eae:	4b21      	ldr	r3, [pc, #132]	; (8004f34 <GT911_Scan+0xf4>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 81c5 	beq.w	8005242 <GT911_Scan+0x402>
	{
		GTDMAReadOK_F = 0;
 8004eb8:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <GT911_Scan+0xf4>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	701a      	strb	r2, [r3, #0]
		if ((GT911buf[0]&0x80) == 0x00)
 8004ebe:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <GT911_Scan+0xf8>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	b25b      	sxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	db11      	blt.n	8004eec <GT911_Scan+0xac>
		{
			if(HAL_I2C_Mem_Write_DMA(&hi2c1, CT_CMD_WR, GT911_READ_XY_REG, I2C_MEMADD_SIZE_16BIT, &Clearbuf, 1))
 8004ec8:	2301      	movs	r3, #1
 8004eca:	9301      	str	r3, [sp, #4]
 8004ecc:	1dbb      	adds	r3, r7, #6
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	f248 124e 	movw	r2, #33102	; 0x814e
 8004ed6:	21ba      	movs	r1, #186	; 0xba
 8004ed8:	4815      	ldr	r0, [pc, #84]	; (8004f30 <GT911_Scan+0xf0>)
 8004eda:	f7fd f827 	bl	8001f2c <HAL_I2C_Mem_Write_DMA>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 81ae 	beq.w	8005242 <GT911_Scan+0x402>
			{
				IICReset();
 8004ee6:	f7ff ff8b 	bl	8004e00 <IICReset>
				return;
 8004eea:	e1aa      	b.n	8005242 <GT911_Scan+0x402>
			}
		}
		else
		{
			Dev_Now.TouchpointFlag = GT911buf[0];
 8004eec:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <GT911_Scan+0xf8>)
 8004eee:	781a      	ldrb	r2, [r3, #0]
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <GT911_Scan+0xe4>)
 8004ef2:	709a      	strb	r2, [r3, #2]
			Dev_Now.TouchCount = GT911buf[0]&0x0f;
 8004ef4:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <GT911_Scan+0xf8>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <GT911_Scan+0xe4>)
 8004f00:	70da      	strb	r2, [r3, #3]

			if(HAL_I2C_Mem_Write_DMA(&hi2c1, CT_CMD_WR, GT911_READ_XY_REG, I2C_MEMADD_SIZE_16BIT, &Clearbuf, 1))
 8004f02:	2301      	movs	r3, #1
 8004f04:	9301      	str	r3, [sp, #4]
 8004f06:	1dbb      	adds	r3, r7, #6
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	2310      	movs	r3, #16
 8004f0c:	f248 124e 	movw	r2, #33102	; 0x814e
 8004f10:	21ba      	movs	r1, #186	; 0xba
 8004f12:	4807      	ldr	r0, [pc, #28]	; (8004f30 <GT911_Scan+0xf0>)
 8004f14:	f7fd f80a 	bl	8001f2c <HAL_I2C_Mem_Write_DMA>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00e      	beq.n	8004f3c <GT911_Scan+0xfc>
			{
				IICReset();
 8004f1e:	f7ff ff6f 	bl	8004e00 <IICReset>
				return;
 8004f22:	e18e      	b.n	8005242 <GT911_Scan+0x402>
 8004f24:	2000019c 	.word	0x2000019c
 8004f28:	20000141 	.word	0x20000141
 8004f2c:	20000144 	.word	0x20000144
 8004f30:	20000028 	.word	0x20000028
 8004f34:	20000140 	.word	0x20000140
 8004f38:	20000170 	.word	0x20000170
			}
			Dev_Now.Touchkeytrackid[0] = GT911buf[1];
 8004f3c:	4b8c      	ldr	r3, [pc, #560]	; (8005170 <GT911_Scan+0x330>)
 8004f3e:	785a      	ldrb	r2, [r3, #1]
 8004f40:	4b8c      	ldr	r3, [pc, #560]	; (8005174 <GT911_Scan+0x334>)
 8004f42:	711a      	strb	r2, [r3, #4]
			Dev_Now.X[0] = ((uint16_t)GT911buf[3] << 8) + GT911buf[2];
 8004f44:	4b8a      	ldr	r3, [pc, #552]	; (8005170 <GT911_Scan+0x330>)
 8004f46:	78db      	ldrb	r3, [r3, #3]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	4b88      	ldr	r3, [pc, #544]	; (8005170 <GT911_Scan+0x330>)
 8004f50:	789b      	ldrb	r3, [r3, #2]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	4413      	add	r3, r2
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	4b86      	ldr	r3, [pc, #536]	; (8005174 <GT911_Scan+0x334>)
 8004f5a:	815a      	strh	r2, [r3, #10]
			Dev_Now.Y[0] = ((uint16_t)GT911buf[5] << 8) + GT911buf[4];
 8004f5c:	4b84      	ldr	r3, [pc, #528]	; (8005170 <GT911_Scan+0x330>)
 8004f5e:	795b      	ldrb	r3, [r3, #5]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	4b82      	ldr	r3, [pc, #520]	; (8005170 <GT911_Scan+0x330>)
 8004f68:	791b      	ldrb	r3, [r3, #4]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	4b80      	ldr	r3, [pc, #512]	; (8005174 <GT911_Scan+0x334>)
 8004f72:	829a      	strh	r2, [r3, #20]
			Dev_Now.S[0] = ((uint16_t)GT911buf[7] << 8) + GT911buf[6];
 8004f74:	4b7e      	ldr	r3, [pc, #504]	; (8005170 <GT911_Scan+0x330>)
 8004f76:	79db      	ldrb	r3, [r3, #7]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	4b7c      	ldr	r3, [pc, #496]	; (8005170 <GT911_Scan+0x330>)
 8004f80:	799b      	ldrb	r3, [r3, #6]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	4413      	add	r3, r2
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	4b7a      	ldr	r3, [pc, #488]	; (8005174 <GT911_Scan+0x334>)
 8004f8a:	83da      	strh	r2, [r3, #30]

			Dev_Now.Touchkeytrackid[1] = GT911buf[9];
 8004f8c:	4b78      	ldr	r3, [pc, #480]	; (8005170 <GT911_Scan+0x330>)
 8004f8e:	7a5a      	ldrb	r2, [r3, #9]
 8004f90:	4b78      	ldr	r3, [pc, #480]	; (8005174 <GT911_Scan+0x334>)
 8004f92:	715a      	strb	r2, [r3, #5]
			Dev_Now.X[1] = ((uint16_t)GT911buf[11] << 8) + GT911buf[10];
 8004f94:	4b76      	ldr	r3, [pc, #472]	; (8005170 <GT911_Scan+0x330>)
 8004f96:	7adb      	ldrb	r3, [r3, #11]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	4b74      	ldr	r3, [pc, #464]	; (8005170 <GT911_Scan+0x330>)
 8004fa0:	7a9b      	ldrb	r3, [r3, #10]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	4b72      	ldr	r3, [pc, #456]	; (8005174 <GT911_Scan+0x334>)
 8004faa:	819a      	strh	r2, [r3, #12]
			Dev_Now.Y[1] = ((uint16_t)GT911buf[13] << 8) + GT911buf[12];
 8004fac:	4b70      	ldr	r3, [pc, #448]	; (8005170 <GT911_Scan+0x330>)
 8004fae:	7b5b      	ldrb	r3, [r3, #13]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	4b6e      	ldr	r3, [pc, #440]	; (8005170 <GT911_Scan+0x330>)
 8004fb8:	7b1b      	ldrb	r3, [r3, #12]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	4b6c      	ldr	r3, [pc, #432]	; (8005174 <GT911_Scan+0x334>)
 8004fc2:	82da      	strh	r2, [r3, #22]
			Dev_Now.S[1] = ((uint16_t)GT911buf[15] << 8) + GT911buf[14];
 8004fc4:	4b6a      	ldr	r3, [pc, #424]	; (8005170 <GT911_Scan+0x330>)
 8004fc6:	7bdb      	ldrb	r3, [r3, #15]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	4b68      	ldr	r3, [pc, #416]	; (8005170 <GT911_Scan+0x330>)
 8004fd0:	7b9b      	ldrb	r3, [r3, #14]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	4b66      	ldr	r3, [pc, #408]	; (8005174 <GT911_Scan+0x334>)
 8004fda:	841a      	strh	r2, [r3, #32]

			Dev_Now.Touchkeytrackid[2] = GT911buf[17];
 8004fdc:	4b64      	ldr	r3, [pc, #400]	; (8005170 <GT911_Scan+0x330>)
 8004fde:	7c5a      	ldrb	r2, [r3, #17]
 8004fe0:	4b64      	ldr	r3, [pc, #400]	; (8005174 <GT911_Scan+0x334>)
 8004fe2:	719a      	strb	r2, [r3, #6]
			Dev_Now.X[2] = ((uint16_t)GT911buf[19] << 8) + GT911buf[18];
 8004fe4:	4b62      	ldr	r3, [pc, #392]	; (8005170 <GT911_Scan+0x330>)
 8004fe6:	7cdb      	ldrb	r3, [r3, #19]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	4b60      	ldr	r3, [pc, #384]	; (8005170 <GT911_Scan+0x330>)
 8004ff0:	7c9b      	ldrb	r3, [r3, #18]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	4b5e      	ldr	r3, [pc, #376]	; (8005174 <GT911_Scan+0x334>)
 8004ffa:	81da      	strh	r2, [r3, #14]
			Dev_Now.Y[2] = ((uint16_t)GT911buf[21] << 8) + GT911buf[20];
 8004ffc:	4b5c      	ldr	r3, [pc, #368]	; (8005170 <GT911_Scan+0x330>)
 8004ffe:	7d5b      	ldrb	r3, [r3, #21]
 8005000:	b29b      	uxth	r3, r3
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	b29a      	uxth	r2, r3
 8005006:	4b5a      	ldr	r3, [pc, #360]	; (8005170 <GT911_Scan+0x330>)
 8005008:	7d1b      	ldrb	r3, [r3, #20]
 800500a:	b29b      	uxth	r3, r3
 800500c:	4413      	add	r3, r2
 800500e:	b29a      	uxth	r2, r3
 8005010:	4b58      	ldr	r3, [pc, #352]	; (8005174 <GT911_Scan+0x334>)
 8005012:	831a      	strh	r2, [r3, #24]
			Dev_Now.S[2] = ((uint16_t)GT911buf[23] << 8) + GT911buf[22];
 8005014:	4b56      	ldr	r3, [pc, #344]	; (8005170 <GT911_Scan+0x330>)
 8005016:	7ddb      	ldrb	r3, [r3, #23]
 8005018:	b29b      	uxth	r3, r3
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	b29a      	uxth	r2, r3
 800501e:	4b54      	ldr	r3, [pc, #336]	; (8005170 <GT911_Scan+0x330>)
 8005020:	7d9b      	ldrb	r3, [r3, #22]
 8005022:	b29b      	uxth	r3, r3
 8005024:	4413      	add	r3, r2
 8005026:	b29a      	uxth	r2, r3
 8005028:	4b52      	ldr	r3, [pc, #328]	; (8005174 <GT911_Scan+0x334>)
 800502a:	845a      	strh	r2, [r3, #34]	; 0x22

			Dev_Now.Touchkeytrackid[3] = GT911buf[25];
 800502c:	4b50      	ldr	r3, [pc, #320]	; (8005170 <GT911_Scan+0x330>)
 800502e:	7e5a      	ldrb	r2, [r3, #25]
 8005030:	4b50      	ldr	r3, [pc, #320]	; (8005174 <GT911_Scan+0x334>)
 8005032:	71da      	strb	r2, [r3, #7]
			Dev_Now.X[3] = ((uint16_t)GT911buf[27] << 8) + GT911buf[26];
 8005034:	4b4e      	ldr	r3, [pc, #312]	; (8005170 <GT911_Scan+0x330>)
 8005036:	7edb      	ldrb	r3, [r3, #27]
 8005038:	b29b      	uxth	r3, r3
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	b29a      	uxth	r2, r3
 800503e:	4b4c      	ldr	r3, [pc, #304]	; (8005170 <GT911_Scan+0x330>)
 8005040:	7e9b      	ldrb	r3, [r3, #26]
 8005042:	b29b      	uxth	r3, r3
 8005044:	4413      	add	r3, r2
 8005046:	b29a      	uxth	r2, r3
 8005048:	4b4a      	ldr	r3, [pc, #296]	; (8005174 <GT911_Scan+0x334>)
 800504a:	821a      	strh	r2, [r3, #16]
			Dev_Now.Y[3] = ((uint16_t)GT911buf[29] << 8) + GT911buf[28];
 800504c:	4b48      	ldr	r3, [pc, #288]	; (8005170 <GT911_Scan+0x330>)
 800504e:	7f5b      	ldrb	r3, [r3, #29]
 8005050:	b29b      	uxth	r3, r3
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	b29a      	uxth	r2, r3
 8005056:	4b46      	ldr	r3, [pc, #280]	; (8005170 <GT911_Scan+0x330>)
 8005058:	7f1b      	ldrb	r3, [r3, #28]
 800505a:	b29b      	uxth	r3, r3
 800505c:	4413      	add	r3, r2
 800505e:	b29a      	uxth	r2, r3
 8005060:	4b44      	ldr	r3, [pc, #272]	; (8005174 <GT911_Scan+0x334>)
 8005062:	835a      	strh	r2, [r3, #26]
			Dev_Now.S[3] = ((uint16_t)GT911buf[31] << 8) + GT911buf[30];
 8005064:	4b42      	ldr	r3, [pc, #264]	; (8005170 <GT911_Scan+0x330>)
 8005066:	7fdb      	ldrb	r3, [r3, #31]
 8005068:	b29b      	uxth	r3, r3
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	b29a      	uxth	r2, r3
 800506e:	4b40      	ldr	r3, [pc, #256]	; (8005170 <GT911_Scan+0x330>)
 8005070:	7f9b      	ldrb	r3, [r3, #30]
 8005072:	b29b      	uxth	r3, r3
 8005074:	4413      	add	r3, r2
 8005076:	b29a      	uxth	r2, r3
 8005078:	4b3e      	ldr	r3, [pc, #248]	; (8005174 <GT911_Scan+0x334>)
 800507a:	849a      	strh	r2, [r3, #36]	; 0x24

			Dev_Now.Touchkeytrackid[4] = GT911buf[33];
 800507c:	4b3c      	ldr	r3, [pc, #240]	; (8005170 <GT911_Scan+0x330>)
 800507e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005082:	4b3c      	ldr	r3, [pc, #240]	; (8005174 <GT911_Scan+0x334>)
 8005084:	721a      	strb	r2, [r3, #8]
			Dev_Now.X[4] = ((uint16_t)GT911buf[35] << 8) + GT911buf[34];
 8005086:	4b3a      	ldr	r3, [pc, #232]	; (8005170 <GT911_Scan+0x330>)
 8005088:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800508c:	b29b      	uxth	r3, r3
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	b29a      	uxth	r2, r3
 8005092:	4b37      	ldr	r3, [pc, #220]	; (8005170 <GT911_Scan+0x330>)
 8005094:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005098:	b29b      	uxth	r3, r3
 800509a:	4413      	add	r3, r2
 800509c:	b29a      	uxth	r2, r3
 800509e:	4b35      	ldr	r3, [pc, #212]	; (8005174 <GT911_Scan+0x334>)
 80050a0:	825a      	strh	r2, [r3, #18]
			Dev_Now.Y[4] = ((uint16_t)GT911buf[37] << 8) + GT911buf[36];
 80050a2:	4b33      	ldr	r3, [pc, #204]	; (8005170 <GT911_Scan+0x330>)
 80050a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	4b30      	ldr	r3, [pc, #192]	; (8005170 <GT911_Scan+0x330>)
 80050b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	4b2e      	ldr	r3, [pc, #184]	; (8005174 <GT911_Scan+0x334>)
 80050bc:	839a      	strh	r2, [r3, #28]
			Dev_Now.S[4] = ((uint16_t)GT911buf[39] << 8) + GT911buf[38];
 80050be:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <GT911_Scan+0x330>)
 80050c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	4b29      	ldr	r3, [pc, #164]	; (8005170 <GT911_Scan+0x330>)
 80050cc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	4b27      	ldr	r3, [pc, #156]	; (8005174 <GT911_Scan+0x334>)
 80050d8:	84da      	strh	r2, [r3, #38]	; 0x26

			for (i = 0; i< Dev_Backup.TouchCount;i++)
 80050da:	2300      	movs	r3, #0
 80050dc:	71fb      	strb	r3, [r7, #7]
 80050de:	e03e      	b.n	800515e <GT911_Scan+0x31e>
			{
				if(Dev_Now.Y[i]<20)Dev_Now.Y[i]=20;
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	4a24      	ldr	r2, [pc, #144]	; (8005174 <GT911_Scan+0x334>)
 80050e4:	3308      	adds	r3, #8
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	4413      	add	r3, r2
 80050ea:	889b      	ldrh	r3, [r3, #4]
 80050ec:	2b13      	cmp	r3, #19
 80050ee:	d806      	bhi.n	80050fe <GT911_Scan+0x2be>
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	4a20      	ldr	r2, [pc, #128]	; (8005174 <GT911_Scan+0x334>)
 80050f4:	3308      	adds	r3, #8
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	4413      	add	r3, r2
 80050fa:	2214      	movs	r2, #20
 80050fc:	809a      	strh	r2, [r3, #4]
				if(Dev_Now.Y[i]>GT911_MAX_HEIGHT-20)Dev_Now.Y[i]=GT911_MAX_HEIGHT-20;
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <GT911_Scan+0x334>)
 8005102:	3308      	adds	r3, #8
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	889b      	ldrh	r3, [r3, #4]
 800510a:	2bdc      	cmp	r3, #220	; 0xdc
 800510c:	d906      	bls.n	800511c <GT911_Scan+0x2dc>
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	4a18      	ldr	r2, [pc, #96]	; (8005174 <GT911_Scan+0x334>)
 8005112:	3308      	adds	r3, #8
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	4413      	add	r3, r2
 8005118:	22dc      	movs	r2, #220	; 0xdc
 800511a:	809a      	strh	r2, [r3, #4]
				if(Dev_Now.X[i]<20)Dev_Now.X[i]=20;
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	4a15      	ldr	r2, [pc, #84]	; (8005174 <GT911_Scan+0x334>)
 8005120:	3304      	adds	r3, #4
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	4413      	add	r3, r2
 8005126:	885b      	ldrh	r3, [r3, #2]
 8005128:	2b13      	cmp	r3, #19
 800512a:	d806      	bhi.n	800513a <GT911_Scan+0x2fa>
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	4a11      	ldr	r2, [pc, #68]	; (8005174 <GT911_Scan+0x334>)
 8005130:	3304      	adds	r3, #4
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	4413      	add	r3, r2
 8005136:	2214      	movs	r2, #20
 8005138:	805a      	strh	r2, [r3, #2]
				if(Dev_Now.X[i]>GT911_MAX_WIDTH-20)Dev_Now.X[i]=GT911_MAX_WIDTH-20;
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <GT911_Scan+0x334>)
 800513e:	3304      	adds	r3, #4
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4413      	add	r3, r2
 8005144:	885b      	ldrh	r3, [r3, #2]
 8005146:	2bdc      	cmp	r3, #220	; 0xdc
 8005148:	d906      	bls.n	8005158 <GT911_Scan+0x318>
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	4a09      	ldr	r2, [pc, #36]	; (8005174 <GT911_Scan+0x334>)
 800514e:	3304      	adds	r3, #4
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	4413      	add	r3, r2
 8005154:	22dc      	movs	r2, #220	; 0xdc
 8005156:	805a      	strh	r2, [r3, #2]
			for (i = 0; i< Dev_Backup.TouchCount;i++)
 8005158:	79fb      	ldrb	r3, [r7, #7]
 800515a:	3301      	adds	r3, #1
 800515c:	71fb      	strb	r3, [r7, #7]
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <GT911_Scan+0x338>)
 8005160:	78db      	ldrb	r3, [r3, #3]
 8005162:	79fa      	ldrb	r2, [r7, #7]
 8005164:	429a      	cmp	r2, r3
 8005166:	d3bb      	bcc.n	80050e0 <GT911_Scan+0x2a0>
			}
			for (i=0;i<Dev_Now.TouchCount;i++)
 8005168:	2300      	movs	r3, #0
 800516a:	71fb      	strb	r3, [r7, #7]
 800516c:	e064      	b.n	8005238 <GT911_Scan+0x3f8>
 800516e:	bf00      	nop
 8005170:	20000170 	.word	0x20000170
 8005174:	2000019c 	.word	0x2000019c
 8005178:	200001c4 	.word	0x200001c4
			{
				if(Dev_Now.Y[i]<20)Dev_Now.Y[i]=20;
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	4a32      	ldr	r2, [pc, #200]	; (8005248 <GT911_Scan+0x408>)
 8005180:	3308      	adds	r3, #8
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	4413      	add	r3, r2
 8005186:	889b      	ldrh	r3, [r3, #4]
 8005188:	2b13      	cmp	r3, #19
 800518a:	d806      	bhi.n	800519a <GT911_Scan+0x35a>
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	4a2e      	ldr	r2, [pc, #184]	; (8005248 <GT911_Scan+0x408>)
 8005190:	3308      	adds	r3, #8
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4413      	add	r3, r2
 8005196:	2214      	movs	r2, #20
 8005198:	809a      	strh	r2, [r3, #4]
				if(Dev_Now.Y[i]>GT911_MAX_HEIGHT-20)Dev_Now.Y[i]=GT911_MAX_HEIGHT-20;
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	4a2a      	ldr	r2, [pc, #168]	; (8005248 <GT911_Scan+0x408>)
 800519e:	3308      	adds	r3, #8
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	4413      	add	r3, r2
 80051a4:	889b      	ldrh	r3, [r3, #4]
 80051a6:	2bdc      	cmp	r3, #220	; 0xdc
 80051a8:	d906      	bls.n	80051b8 <GT911_Scan+0x378>
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	4a26      	ldr	r2, [pc, #152]	; (8005248 <GT911_Scan+0x408>)
 80051ae:	3308      	adds	r3, #8
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4413      	add	r3, r2
 80051b4:	22dc      	movs	r2, #220	; 0xdc
 80051b6:	809a      	strh	r2, [r3, #4]
				if(Dev_Now.X[i]<20)Dev_Now.X[i]=20;
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	4a23      	ldr	r2, [pc, #140]	; (8005248 <GT911_Scan+0x408>)
 80051bc:	3304      	adds	r3, #4
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	4413      	add	r3, r2
 80051c2:	885b      	ldrh	r3, [r3, #2]
 80051c4:	2b13      	cmp	r3, #19
 80051c6:	d806      	bhi.n	80051d6 <GT911_Scan+0x396>
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	4a1f      	ldr	r2, [pc, #124]	; (8005248 <GT911_Scan+0x408>)
 80051cc:	3304      	adds	r3, #4
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	4413      	add	r3, r2
 80051d2:	2214      	movs	r2, #20
 80051d4:	805a      	strh	r2, [r3, #2]
				if(Dev_Now.X[i]>GT911_MAX_WIDTH-20)Dev_Now.X[i]=GT911_MAX_WIDTH-20;
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	4a1b      	ldr	r2, [pc, #108]	; (8005248 <GT911_Scan+0x408>)
 80051da:	3304      	adds	r3, #4
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	4413      	add	r3, r2
 80051e0:	885b      	ldrh	r3, [r3, #2]
 80051e2:	2bdc      	cmp	r3, #220	; 0xdc
 80051e4:	d906      	bls.n	80051f4 <GT911_Scan+0x3b4>
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	4a17      	ldr	r2, [pc, #92]	; (8005248 <GT911_Scan+0x408>)
 80051ea:	3304      	adds	r3, #4
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4413      	add	r3, r2
 80051f0:	22dc      	movs	r2, #220	; 0xdc
 80051f2:	805a      	strh	r2, [r3, #2]

				Dev_Backup.X[i] = Dev_Now.X[i];
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	79fa      	ldrb	r2, [r7, #7]
 80051f8:	4913      	ldr	r1, [pc, #76]	; (8005248 <GT911_Scan+0x408>)
 80051fa:	3304      	adds	r3, #4
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	440b      	add	r3, r1
 8005200:	8858      	ldrh	r0, [r3, #2]
 8005202:	4912      	ldr	r1, [pc, #72]	; (800524c <GT911_Scan+0x40c>)
 8005204:	1d13      	adds	r3, r2, #4
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	440b      	add	r3, r1
 800520a:	4602      	mov	r2, r0
 800520c:	805a      	strh	r2, [r3, #2]
				Dev_Backup.Y[i] = Dev_Now.Y[i];
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	79fa      	ldrb	r2, [r7, #7]
 8005212:	490d      	ldr	r1, [pc, #52]	; (8005248 <GT911_Scan+0x408>)
 8005214:	3308      	adds	r3, #8
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	440b      	add	r3, r1
 800521a:	8898      	ldrh	r0, [r3, #4]
 800521c:	490b      	ldr	r1, [pc, #44]	; (800524c <GT911_Scan+0x40c>)
 800521e:	f102 0308 	add.w	r3, r2, #8
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	440b      	add	r3, r1
 8005226:	4602      	mov	r2, r0
 8005228:	809a      	strh	r2, [r3, #4]
				Dev_Backup.TouchCount = Dev_Now.TouchCount;
 800522a:	4b07      	ldr	r3, [pc, #28]	; (8005248 <GT911_Scan+0x408>)
 800522c:	78da      	ldrb	r2, [r3, #3]
 800522e:	4b07      	ldr	r3, [pc, #28]	; (800524c <GT911_Scan+0x40c>)
 8005230:	70da      	strb	r2, [r3, #3]
			for (i=0;i<Dev_Now.TouchCount;i++)
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	3301      	adds	r3, #1
 8005236:	71fb      	strb	r3, [r7, #7]
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <GT911_Scan+0x408>)
 800523a:	78db      	ldrb	r3, [r3, #3]
 800523c:	79fa      	ldrb	r2, [r7, #7]
 800523e:	429a      	cmp	r2, r3
 8005240:	d39c      	bcc.n	800517c <GT911_Scan+0x33c>
			}
		}
	}
}
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	2000019c 	.word	0x2000019c
 800524c:	200001c4 	.word	0x200001c4

08005250 <__libc_init_array>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4d0d      	ldr	r5, [pc, #52]	; (8005288 <__libc_init_array+0x38>)
 8005254:	4c0d      	ldr	r4, [pc, #52]	; (800528c <__libc_init_array+0x3c>)
 8005256:	1b64      	subs	r4, r4, r5
 8005258:	10a4      	asrs	r4, r4, #2
 800525a:	2600      	movs	r6, #0
 800525c:	42a6      	cmp	r6, r4
 800525e:	d109      	bne.n	8005274 <__libc_init_array+0x24>
 8005260:	4d0b      	ldr	r5, [pc, #44]	; (8005290 <__libc_init_array+0x40>)
 8005262:	4c0c      	ldr	r4, [pc, #48]	; (8005294 <__libc_init_array+0x44>)
 8005264:	f000 f820 	bl	80052a8 <_init>
 8005268:	1b64      	subs	r4, r4, r5
 800526a:	10a4      	asrs	r4, r4, #2
 800526c:	2600      	movs	r6, #0
 800526e:	42a6      	cmp	r6, r4
 8005270:	d105      	bne.n	800527e <__libc_init_array+0x2e>
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	f855 3b04 	ldr.w	r3, [r5], #4
 8005278:	4798      	blx	r3
 800527a:	3601      	adds	r6, #1
 800527c:	e7ee      	b.n	800525c <__libc_init_array+0xc>
 800527e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005282:	4798      	blx	r3
 8005284:	3601      	adds	r6, #1
 8005286:	e7f2      	b.n	800526e <__libc_init_array+0x1e>
 8005288:	080052e8 	.word	0x080052e8
 800528c:	080052e8 	.word	0x080052e8
 8005290:	080052e8 	.word	0x080052e8
 8005294:	080052ec 	.word	0x080052ec

08005298 <memset>:
 8005298:	4402      	add	r2, r0
 800529a:	4603      	mov	r3, r0
 800529c:	4293      	cmp	r3, r2
 800529e:	d100      	bne.n	80052a2 <memset+0xa>
 80052a0:	4770      	bx	lr
 80052a2:	f803 1b01 	strb.w	r1, [r3], #1
 80052a6:	e7f9      	b.n	800529c <memset+0x4>

080052a8 <_init>:
 80052a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052aa:	bf00      	nop
 80052ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ae:	bc08      	pop	{r3}
 80052b0:	469e      	mov	lr, r3
 80052b2:	4770      	bx	lr

080052b4 <_fini>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	bf00      	nop
 80052b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ba:	bc08      	pop	{r3}
 80052bc:	469e      	mov	lr, r3
 80052be:	4770      	bx	lr
